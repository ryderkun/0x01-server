%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.18.4 on {{2015,6,6},{0,47,25}}
-module(protocol).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_Unit.UnitStatus'/1, 'enum_value_by_symbol_Unit.UnitStatus'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("protocol.hrl").
-include("gpb.hrl").


encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'ProtocolVector2'{} -> e_msg_ProtocolVector2(Msg);
      #'ProtocolUnit'{} -> e_msg_ProtocolUnit(Msg);
      #'ProtocolUnitUpdate'{} ->
	  e_msg_ProtocolUnitUpdate(Msg);
      #'ProtocolDot'{} -> e_msg_ProtocolDot(Msg);
      #'ProtocolDotAdd'{} -> e_msg_ProtocolDotAdd(Msg);
      #'ProtocolUnitAdd'{} -> e_msg_ProtocolUnitAdd(Msg);
      #'ProtocolSceneInit'{} -> e_msg_ProtocolSceneInit(Msg);
      #'ProtocolDotRemove'{} -> e_msg_ProtocolDotRemove(Msg);
      #'ProtocolUnitRemove'{} ->
	  e_msg_ProtocolUnitRemove(Msg);
      #'ProtocolSceneSync'{} -> e_msg_ProtocolSceneSync(Msg);
      #'ProtocolTimeSync'{} -> e_msg_ProtocolTimeSync(Msg)
    end.


'e_enum_Unit.UnitStatus'('Idle', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Unit.UnitStatus'('Move', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Unit.UnitStatus'('Jump', Bin) ->
    <<Bin/binary, 3>>.

e_msg_ProtocolVector2(Msg) ->
    e_msg_ProtocolVector2(Msg, <<>>).


e_msg_ProtocolVector2(#'ProtocolVector2'{x = F1,
					 y = F2},
		      Bin) ->
    B1 = e_type_float(F1, <<Bin/binary, 13>>),
    e_type_float(F2, <<B1/binary, 21>>).

e_msg_ProtocolUnit(Msg) ->
    e_msg_ProtocolUnit(Msg, <<>>).


e_msg_ProtocolUnit(#'ProtocolUnit'{id = F1, pos = F2,
				   towards = F3, status = F4, name = F5,
				   size = F6, color = F7},
		   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_ProtocolUnit_pos(F2, <<B1/binary, 18>>),
    B3 = e_mfield_ProtocolUnit_towards(F3,
				       <<B2/binary, 26>>),
    B4 = 'e_enum_Unit.UnitStatus'(F4, <<B3/binary, 32>>),
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_float(F6, <<B5/binary, 53>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_type_int32(F7, <<B6/binary, 56>>)
    end.

e_msg_ProtocolUnitUpdate(Msg) ->
    e_msg_ProtocolUnitUpdate(Msg, <<>>).


e_msg_ProtocolUnitUpdate(#'ProtocolUnitUpdate'{milliseconds
						   = F1,
					       units = F2},
			 Bin) ->
    B1 = e_type_int64(F1, <<Bin/binary, 8>>),
    if F2 == [] -> B1;
       true -> e_field_ProtocolUnitUpdate_units(F2, B1)
    end.

e_msg_ProtocolDot(Msg) -> e_msg_ProtocolDot(Msg, <<>>).


e_msg_ProtocolDot(#'ProtocolDot'{id = F1, pos = F2,
				 color = F3},
		  Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_ProtocolDot_pos(F2, <<B1/binary, 18>>),
    e_type_int32(F3, <<B2/binary, 24>>).

e_msg_ProtocolDotAdd(Msg) ->
    e_msg_ProtocolDotAdd(Msg, <<>>).


e_msg_ProtocolDotAdd(#'ProtocolDotAdd'{dots = F1},
		     Bin) ->
    if F1 == [] -> Bin;
       true -> e_field_ProtocolDotAdd_dots(F1, Bin)
    end.

e_msg_ProtocolUnitAdd(Msg) ->
    e_msg_ProtocolUnitAdd(Msg, <<>>).


e_msg_ProtocolUnitAdd(#'ProtocolUnitAdd'{units = F1},
		      Bin) ->
    if F1 == [] -> Bin;
       true -> e_field_ProtocolUnitAdd_units(F1, Bin)
    end.

e_msg_ProtocolSceneInit(Msg) ->
    e_msg_ProtocolSceneInit(Msg, <<>>).


e_msg_ProtocolSceneInit(#'ProtocolSceneInit'{unit_adds =
						 F1,
					     dot_adds = F2},
			Bin) ->
    B1 = e_mfield_ProtocolSceneInit_unit_adds(F1,
					      <<Bin/binary, 10>>),
    e_mfield_ProtocolSceneInit_dot_adds(F2,
					<<B1/binary, 18>>).

e_msg_ProtocolDotRemove(Msg) ->
    e_msg_ProtocolDotRemove(Msg, <<>>).


e_msg_ProtocolDotRemove(#'ProtocolDotRemove'{ids = F1},
			Bin) ->
    if F1 == [] -> Bin;
       true -> e_field_ProtocolDotRemove_ids(F1, Bin)
    end.

e_msg_ProtocolUnitRemove(Msg) ->
    e_msg_ProtocolUnitRemove(Msg, <<>>).


e_msg_ProtocolUnitRemove(#'ProtocolUnitRemove'{ids =
						   F1},
			 Bin) ->
    if F1 == [] -> Bin;
       true -> e_field_ProtocolUnitRemove_ids(F1, Bin)
    end.

e_msg_ProtocolSceneSync(Msg) ->
    e_msg_ProtocolSceneSync(Msg, <<>>).


e_msg_ProtocolSceneSync(#'ProtocolSceneSync'{unit_updates
						 = F1,
					     unit_removes = F2, dot_adds = F3,
					     dot_removes = F4},
			Bin) ->
    B1 = e_mfield_ProtocolSceneSync_unit_updates(F1,
						 <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		e_mfield_ProtocolSceneSync_unit_removes(F2,
							<<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		e_mfield_ProtocolSceneSync_dot_adds(F3,
						    <<B2/binary, 26>>)
	 end,
    if F4 == undefined -> B3;
       true ->
	   e_mfield_ProtocolSceneSync_dot_removes(F4,
						  <<B3/binary, 34>>)
    end.

e_msg_ProtocolTimeSync(Msg) ->
    e_msg_ProtocolTimeSync(Msg, <<>>).


e_msg_ProtocolTimeSync(#'ProtocolTimeSync'{client = F1,
					   server = F2},
		       Bin) ->
    B1 = e_type_int64(F1, <<Bin/binary, 8>>),
    e_type_int64(F2, <<B1/binary, 16>>).

e_mfield_ProtocolUnit_pos(Msg, Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    e_msg_ProtocolVector2(Msg, Bin2).

e_mfield_ProtocolUnit_towards(Msg, Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    e_msg_ProtocolVector2(Msg, Bin2).

e_mfield_ProtocolUnitUpdate_units(Msg, Bin) ->
    SubBin = e_msg_ProtocolUnit(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ProtocolUnitUpdate_units([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_ProtocolUnitUpdate_units(Elem, Bin2),
    e_field_ProtocolUnitUpdate_units(Rest, Bin3);
e_field_ProtocolUnitUpdate_units([], Bin) -> Bin.

e_mfield_ProtocolDot_pos(Msg, Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    e_msg_ProtocolVector2(Msg, Bin2).

e_mfield_ProtocolDotAdd_dots(Msg, Bin) ->
    SubBin = e_msg_ProtocolDot(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ProtocolDotAdd_dots([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ProtocolDotAdd_dots(Elem, Bin2),
    e_field_ProtocolDotAdd_dots(Rest, Bin3);
e_field_ProtocolDotAdd_dots([], Bin) -> Bin.

e_mfield_ProtocolUnitAdd_units(Msg, Bin) ->
    SubBin = e_msg_ProtocolUnit(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ProtocolUnitAdd_units([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ProtocolUnitAdd_units(Elem, Bin2),
    e_field_ProtocolUnitAdd_units(Rest, Bin3);
e_field_ProtocolUnitAdd_units([], Bin) -> Bin.

e_mfield_ProtocolSceneInit_unit_adds(Msg, Bin) ->
    SubBin = e_msg_ProtocolUnitAdd(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ProtocolSceneInit_dot_adds(Msg, Bin) ->
    SubBin = e_msg_ProtocolDotAdd(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ProtocolDotRemove_ids([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(Elem, Bin2),
    e_field_ProtocolDotRemove_ids(Rest, Bin3);
e_field_ProtocolDotRemove_ids([], Bin) -> Bin.

e_field_ProtocolUnitRemove_ids([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(Elem, Bin2),
    e_field_ProtocolUnitRemove_ids(Rest, Bin3);
e_field_ProtocolUnitRemove_ids([], Bin) -> Bin.

e_mfield_ProtocolSceneSync_unit_updates(Msg, Bin) ->
    SubBin = e_msg_ProtocolUnitUpdate(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ProtocolSceneSync_unit_removes(Msg, Bin) ->
    SubBin = e_msg_ProtocolUnitRemove(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ProtocolSceneSync_dot_adds(Msg, Bin) ->
    SubBin = e_msg_ProtocolDotAdd(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ProtocolSceneSync_dot_removes(Msg, Bin) ->
    SubBin = e_msg_ProtocolDotRemove(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:32/unsigned-native>> = <<Value:32/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_float(Value, Bin) ->
    <<Bin/binary, Value:32/little-float>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'ProtocolVector2' -> d_msg_ProtocolVector2(Bin);
      'ProtocolUnit' -> d_msg_ProtocolUnit(Bin);
      'ProtocolUnitUpdate' -> d_msg_ProtocolUnitUpdate(Bin);
      'ProtocolDot' -> d_msg_ProtocolDot(Bin);
      'ProtocolDotAdd' -> d_msg_ProtocolDotAdd(Bin);
      'ProtocolUnitAdd' -> d_msg_ProtocolUnitAdd(Bin);
      'ProtocolSceneInit' -> d_msg_ProtocolSceneInit(Bin);
      'ProtocolDotRemove' -> d_msg_ProtocolDotRemove(Bin);
      'ProtocolUnitRemove' -> d_msg_ProtocolUnitRemove(Bin);
      'ProtocolSceneSync' -> d_msg_ProtocolSceneSync(Bin);
      'ProtocolTimeSync' -> d_msg_ProtocolTimeSync(Bin)
    end.



'd_enum_Unit.UnitStatus'(1) -> 'Idle';
'd_enum_Unit.UnitStatus'(2) -> 'Move';
'd_enum_Unit.UnitStatus'(3) -> 'Jump'.

d_msg_ProtocolVector2(Bin) ->
    dfp_read_field_def_ProtocolVector2(Bin, 0, 0, undefined,
				       undefined).

dfp_read_field_def_ProtocolVector2(<<13, Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    d_field_ProtocolVector2_x(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolVector2(<<21, Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    d_field_ProtocolVector2_y(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolVector2(<<>>, 0, 0, F1,
				   F2) ->
    #'ProtocolVector2'{x = F1, y = F2};
dfp_read_field_def_ProtocolVector2(Other, Z1, Z2, F1,
				   F2) ->
    dg_read_field_def_ProtocolVector2(Other, Z1, Z2, F1,
				      F2).

dg_read_field_def_ProtocolVector2(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolVector2(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
dg_read_field_def_ProtocolVector2(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      13 -> d_field_ProtocolVector2_x(Rest, 0, 0, F1, F2);
      21 -> d_field_ProtocolVector2_y(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolVector2(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ProtocolVector2(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ProtocolVector2(Rest, 0, 0, F1,
						      F2);
	    5 -> skip_32_ProtocolVector2(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ProtocolVector2(<<>>, 0, 0, F1, F2) ->
    #'ProtocolVector2'{x = F1, y = F2}.

d_field_ProtocolVector2_x(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, _, F2) ->
    dfp_read_field_def_ProtocolVector2(Rest, Z1, Z2, Value,
				       F2).


d_field_ProtocolVector2_y(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, F1, _) ->
    dfp_read_field_def_ProtocolVector2(Rest, Z1, Z2, F1,
				       Value).


skip_varint_ProtocolVector2(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2) ->
    skip_varint_ProtocolVector2(Rest, Z1, Z2, F1, F2);
skip_varint_ProtocolVector2(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2) ->
    dfp_read_field_def_ProtocolVector2(Rest, Z1, Z2, F1,
				       F2).


skip_length_delimited_ProtocolVector2(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ProtocolVector2(Rest, N + 7,
					  X bsl N + Acc, F1, F2);
skip_length_delimited_ProtocolVector2(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolVector2(Rest2, 0, 0, F1, F2).


skip_32_ProtocolVector2(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2) ->
    dfp_read_field_def_ProtocolVector2(Rest, Z1, Z2, F1,
				       F2).


skip_64_ProtocolVector2(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2) ->
    dfp_read_field_def_ProtocolVector2(Rest, Z1, Z2, F1,
				       F2).


d_msg_ProtocolUnit(Bin) ->
    dfp_read_field_def_ProtocolUnit(Bin, 0, 0, undefined,
				    undefined, undefined, undefined, undefined,
				    undefined, undefined).

dfp_read_field_def_ProtocolUnit(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ProtocolUnit_id(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7);
dfp_read_field_def_ProtocolUnit(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ProtocolUnit_pos(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7);
dfp_read_field_def_ProtocolUnit(<<26, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ProtocolUnit_towards(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7);
dfp_read_field_def_ProtocolUnit(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ProtocolUnit_status(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7);
dfp_read_field_def_ProtocolUnit(<<42, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ProtocolUnit_name(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
dfp_read_field_def_ProtocolUnit(<<53, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ProtocolUnit_size(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
dfp_read_field_def_ProtocolUnit(<<56, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ProtocolUnit_color(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7);
dfp_read_field_def_ProtocolUnit(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7) ->
    #'ProtocolUnit'{id = F1, pos = F2, towards = F3,
		    status = F4, name = F5, size = F6, color = F7};
dfp_read_field_def_ProtocolUnit(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6, F7) ->
    dg_read_field_def_ProtocolUnit(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6, F7).

dg_read_field_def_ProtocolUnit(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolUnit(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
dg_read_field_def_ProtocolUnit(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ProtocolUnit_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7);
      18 ->
	  d_field_ProtocolUnit_pos(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7);
      26 ->
	  d_field_ProtocolUnit_towards(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7);
      32 ->
	  d_field_ProtocolUnit_status(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7);
      42 ->
	  d_field_ProtocolUnit_name(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7);
      53 ->
	  d_field_ProtocolUnit_size(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7);
      56 ->
	  d_field_ProtocolUnit_color(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ProtocolUnit(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7);
	    1 ->
		skip_64_ProtocolUnit(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7);
	    2 ->
		skip_length_delimited_ProtocolUnit(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7);
	    5 ->
		skip_32_ProtocolUnit(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7)
	  end
    end;
dg_read_field_def_ProtocolUnit(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7) ->
    #'ProtocolUnit'{id = F1, pos = F2, towards = F3,
		    status = F4, name = F5, size = F6, color = F7}.

d_field_ProtocolUnit_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ProtocolUnit_id(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7);
d_field_ProtocolUnit_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolUnit(Rest2, 0, 0, NewFValue,
				    F2, F3, F4, F5, F6, F7).


d_field_ProtocolUnit_pos(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ProtocolUnit_pos(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7);
d_field_ProtocolUnit_pos(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolVector2'),
    dfp_read_field_def_ProtocolUnit(Rest2, 0, 0, F1,
				    if F2 == undefined -> NewFValue;
				       true ->
					   merge_msg_ProtocolVector2(F2,
								     NewFValue)
				    end,
				    F3, F4, F5, F6, F7).


d_field_ProtocolUnit_towards(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ProtocolUnit_towards(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7);
d_field_ProtocolUnit_towards(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolVector2'),
    dfp_read_field_def_ProtocolUnit(Rest2, 0, 0, F1, F2,
				    if F3 == undefined -> NewFValue;
				       true ->
					   merge_msg_ProtocolVector2(F3,
								     NewFValue)
				    end,
				    F4, F5, F6, F7).


d_field_ProtocolUnit_status(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ProtocolUnit_status(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7);
d_field_ProtocolUnit_status(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, _, F5, F6, F7) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Unit.UnitStatus'(Tmp),
    dfp_read_field_def_ProtocolUnit(Rest, 0, 0, F1, F2, F3,
				    NewFValue, F5, F6, F7).


d_field_ProtocolUnit_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ProtocolUnit_name(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7);
d_field_ProtocolUnit_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, _, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolUnit(Rest2, 0, 0, F1, F2, F3,
				    F4, NewFValue, F6, F7).


d_field_ProtocolUnit_size(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, F1, F2, F3, F4, F5, _, F7) ->
    dfp_read_field_def_ProtocolUnit(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, Value, F7).


d_field_ProtocolUnit_color(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ProtocolUnit_color(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
d_field_ProtocolUnit_color(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ProtocolUnit(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, NewFValue).


skip_varint_ProtocolUnit(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_ProtocolUnit(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7);
skip_varint_ProtocolUnit(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_ProtocolUnit(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7).


skip_length_delimited_ProtocolUnit(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_ProtocolUnit(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7);
skip_length_delimited_ProtocolUnit(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolUnit(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7).


skip_32_ProtocolUnit(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_ProtocolUnit(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7).


skip_64_ProtocolUnit(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_ProtocolUnit(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7).


d_msg_ProtocolUnitUpdate(Bin) ->
    dfp_read_field_def_ProtocolUnitUpdate(Bin, 0, 0,
					  undefined, []).

dfp_read_field_def_ProtocolUnitUpdate(<<8,
					Rest/binary>>,
				      Z1, Z2, F1, F2) ->
    d_field_ProtocolUnitUpdate_milliseconds(Rest, Z1, Z2,
					    F1, F2);
dfp_read_field_def_ProtocolUnitUpdate(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2) ->
    d_field_ProtocolUnitUpdate_units(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolUnitUpdate(<<>>, 0, 0, F1,
				      F2) ->
    #'ProtocolUnitUpdate'{milliseconds = F1,
			  units = lists:reverse(F2)};
dfp_read_field_def_ProtocolUnitUpdate(Other, Z1, Z2, F1,
				      F2) ->
    dg_read_field_def_ProtocolUnitUpdate(Other, Z1, Z2, F1,
					 F2).

dg_read_field_def_ProtocolUnitUpdate(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolUnitUpdate(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
dg_read_field_def_ProtocolUnitUpdate(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ProtocolUnitUpdate_milliseconds(Rest, 0, 0, F1,
						  F2);
      18 ->
	  d_field_ProtocolUnitUpdate_units(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolUnitUpdate(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ProtocolUnitUpdate(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ProtocolUnitUpdate(Rest, 0, 0, F1,
							 F2);
	    5 -> skip_32_ProtocolUnitUpdate(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ProtocolUnitUpdate(<<>>, 0, 0, F1,
				     F2) ->
    #'ProtocolUnitUpdate'{milliseconds = F1,
			  units = lists:reverse(F2)}.

d_field_ProtocolUnitUpdate_milliseconds(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolUnitUpdate_milliseconds(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
d_field_ProtocolUnitUpdate_milliseconds(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_ProtocolUnitUpdate(Rest, 0, 0,
					  NewFValue, F2).


d_field_ProtocolUnitUpdate_units(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolUnitUpdate_units(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
d_field_ProtocolUnitUpdate_units(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolUnit'),
    dfp_read_field_def_ProtocolUnitUpdate(Rest2, 0, 0, F1,
					  [NewFValue | F2]).


skip_varint_ProtocolUnitUpdate(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    skip_varint_ProtocolUnitUpdate(Rest, Z1, Z2, F1, F2);
skip_varint_ProtocolUnitUpdate(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    dfp_read_field_def_ProtocolUnitUpdate(Rest, Z1, Z2, F1,
					  F2).


skip_length_delimited_ProtocolUnitUpdate(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ProtocolUnitUpdate(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
skip_length_delimited_ProtocolUnitUpdate(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolUnitUpdate(Rest2, 0, 0, F1,
					  F2).


skip_32_ProtocolUnitUpdate(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2) ->
    dfp_read_field_def_ProtocolUnitUpdate(Rest, Z1, Z2, F1,
					  F2).


skip_64_ProtocolUnitUpdate(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2) ->
    dfp_read_field_def_ProtocolUnitUpdate(Rest, Z1, Z2, F1,
					  F2).


d_msg_ProtocolDot(Bin) ->
    dfp_read_field_def_ProtocolDot(Bin, 0, 0, undefined,
				   undefined, undefined).

dfp_read_field_def_ProtocolDot(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_ProtocolDot_id(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_ProtocolDot(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_ProtocolDot_pos(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_ProtocolDot(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_ProtocolDot_color(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_ProtocolDot(<<>>, 0, 0, F1, F2,
			       F3) ->
    #'ProtocolDot'{id = F1, pos = F2, color = F3};
dfp_read_field_def_ProtocolDot(Other, Z1, Z2, F1, F2,
			       F3) ->
    dg_read_field_def_ProtocolDot(Other, Z1, Z2, F1, F2,
				  F3).

dg_read_field_def_ProtocolDot(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolDot(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
dg_read_field_def_ProtocolDot(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ProtocolDot_id(Rest, 0, 0, F1, F2, F3);
      18 -> d_field_ProtocolDot_pos(Rest, 0, 0, F1, F2, F3);
      24 -> d_field_ProtocolDot_color(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolDot(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_ProtocolDot(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_ProtocolDot(Rest, 0, 0, F1, F2,
						  F3);
	    5 -> skip_32_ProtocolDot(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_ProtocolDot(<<>>, 0, 0, F1, F2, F3) ->
    #'ProtocolDot'{id = F1, pos = F2, color = F3}.

d_field_ProtocolDot_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ProtocolDot_id(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3);
d_field_ProtocolDot_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolDot(Rest2, 0, 0, NewFValue,
				   F2, F3).


d_field_ProtocolDot_pos(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ProtocolDot_pos(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3);
d_field_ProtocolDot_pos(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolVector2'),
    dfp_read_field_def_ProtocolDot(Rest2, 0, 0, F1,
				   if F2 == undefined -> NewFValue;
				      true ->
					  merge_msg_ProtocolVector2(F2,
								    NewFValue)
				   end,
				   F3).


d_field_ProtocolDot_color(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ProtocolDot_color(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3);
d_field_ProtocolDot_color(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ProtocolDot(Rest, 0, 0, F1, F2,
				   NewFValue).


skip_varint_ProtocolDot(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    skip_varint_ProtocolDot(Rest, Z1, Z2, F1, F2, F3);
skip_varint_ProtocolDot(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    dfp_read_field_def_ProtocolDot(Rest, Z1, Z2, F1, F2,
				   F3).


skip_length_delimited_ProtocolDot(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_ProtocolDot(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
skip_length_delimited_ProtocolDot(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolDot(Rest2, 0, 0, F1, F2, F3).


skip_32_ProtocolDot(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_ProtocolDot(Rest, Z1, Z2, F1, F2,
				   F3).


skip_64_ProtocolDot(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_ProtocolDot(Rest, Z1, Z2, F1, F2,
				   F3).


d_msg_ProtocolDotAdd(Bin) ->
    dfp_read_field_def_ProtocolDotAdd(Bin, 0, 0, []).

dfp_read_field_def_ProtocolDotAdd(<<10, Rest/binary>>,
				  Z1, Z2, F1) ->
    d_field_ProtocolDotAdd_dots(Rest, Z1, Z2, F1);
dfp_read_field_def_ProtocolDotAdd(<<>>, 0, 0, F1) ->
    #'ProtocolDotAdd'{dots = lists:reverse(F1)};
dfp_read_field_def_ProtocolDotAdd(Other, Z1, Z2, F1) ->
    dg_read_field_def_ProtocolDotAdd(Other, Z1, Z2, F1).

dg_read_field_def_ProtocolDotAdd(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolDotAdd(Rest, N + 7,
				     X bsl N + Acc, F1);
dg_read_field_def_ProtocolDotAdd(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ProtocolDotAdd_dots(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolDotAdd(Rest, 0, 0, F1);
	    1 -> skip_64_ProtocolDotAdd(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_ProtocolDotAdd(Rest, 0, 0, F1);
	    5 -> skip_32_ProtocolDotAdd(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_ProtocolDotAdd(<<>>, 0, 0, F1) ->
    #'ProtocolDotAdd'{dots = lists:reverse(F1)}.

d_field_ProtocolDotAdd_dots(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1)
    when N < 57 ->
    d_field_ProtocolDotAdd_dots(Rest, N + 7, X bsl N + Acc,
				F1);
d_field_ProtocolDotAdd_dots(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolDot'),
    dfp_read_field_def_ProtocolDotAdd(Rest2, 0, 0,
				      [NewFValue | F1]).


skip_varint_ProtocolDotAdd(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    skip_varint_ProtocolDotAdd(Rest, Z1, Z2, F1);
skip_varint_ProtocolDotAdd(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    dfp_read_field_def_ProtocolDotAdd(Rest, Z1, Z2, F1).


skip_length_delimited_ProtocolDotAdd(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_ProtocolDotAdd(Rest, N + 7,
					 X bsl N + Acc, F1);
skip_length_delimited_ProtocolDotAdd(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolDotAdd(Rest2, 0, 0, F1).


skip_32_ProtocolDotAdd(<<_:32, Rest/binary>>, Z1, Z2,
		       F1) ->
    dfp_read_field_def_ProtocolDotAdd(Rest, Z1, Z2, F1).


skip_64_ProtocolDotAdd(<<_:64, Rest/binary>>, Z1, Z2,
		       F1) ->
    dfp_read_field_def_ProtocolDotAdd(Rest, Z1, Z2, F1).


d_msg_ProtocolUnitAdd(Bin) ->
    dfp_read_field_def_ProtocolUnitAdd(Bin, 0, 0, []).

dfp_read_field_def_ProtocolUnitAdd(<<10, Rest/binary>>,
				   Z1, Z2, F1) ->
    d_field_ProtocolUnitAdd_units(Rest, Z1, Z2, F1);
dfp_read_field_def_ProtocolUnitAdd(<<>>, 0, 0, F1) ->
    #'ProtocolUnitAdd'{units = lists:reverse(F1)};
dfp_read_field_def_ProtocolUnitAdd(Other, Z1, Z2, F1) ->
    dg_read_field_def_ProtocolUnitAdd(Other, Z1, Z2, F1).

dg_read_field_def_ProtocolUnitAdd(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolUnitAdd(Rest, N + 7,
				      X bsl N + Acc, F1);
dg_read_field_def_ProtocolUnitAdd(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ProtocolUnitAdd_units(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolUnitAdd(Rest, 0, 0, F1);
	    1 -> skip_64_ProtocolUnitAdd(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_ProtocolUnitAdd(Rest, 0, 0, F1);
	    5 -> skip_32_ProtocolUnitAdd(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_ProtocolUnitAdd(<<>>, 0, 0, F1) ->
    #'ProtocolUnitAdd'{units = lists:reverse(F1)}.

d_field_ProtocolUnitAdd_units(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    d_field_ProtocolUnitAdd_units(Rest, N + 7,
				  X bsl N + Acc, F1);
d_field_ProtocolUnitAdd_units(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolUnit'),
    dfp_read_field_def_ProtocolUnitAdd(Rest2, 0, 0,
				       [NewFValue | F1]).


skip_varint_ProtocolUnitAdd(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1) ->
    skip_varint_ProtocolUnitAdd(Rest, Z1, Z2, F1);
skip_varint_ProtocolUnitAdd(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1) ->
    dfp_read_field_def_ProtocolUnitAdd(Rest, Z1, Z2, F1).


skip_length_delimited_ProtocolUnitAdd(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_ProtocolUnitAdd(Rest, N + 7,
					  X bsl N + Acc, F1);
skip_length_delimited_ProtocolUnitAdd(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolUnitAdd(Rest2, 0, 0, F1).


skip_32_ProtocolUnitAdd(<<_:32, Rest/binary>>, Z1, Z2,
			F1) ->
    dfp_read_field_def_ProtocolUnitAdd(Rest, Z1, Z2, F1).


skip_64_ProtocolUnitAdd(<<_:64, Rest/binary>>, Z1, Z2,
			F1) ->
    dfp_read_field_def_ProtocolUnitAdd(Rest, Z1, Z2, F1).


d_msg_ProtocolSceneInit(Bin) ->
    dfp_read_field_def_ProtocolSceneInit(Bin, 0, 0,
					 undefined, undefined).

dfp_read_field_def_ProtocolSceneInit(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_ProtocolSceneInit_unit_adds(Rest, Z1, Z2, F1,
					F2);
dfp_read_field_def_ProtocolSceneInit(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_ProtocolSceneInit_dot_adds(Rest, Z1, Z2, F1,
				       F2);
dfp_read_field_def_ProtocolSceneInit(<<>>, 0, 0, F1,
				     F2) ->
    #'ProtocolSceneInit'{unit_adds = F1, dot_adds = F2};
dfp_read_field_def_ProtocolSceneInit(Other, Z1, Z2, F1,
				     F2) ->
    dg_read_field_def_ProtocolSceneInit(Other, Z1, Z2, F1,
					F2).

dg_read_field_def_ProtocolSceneInit(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolSceneInit(Rest, N + 7,
					X bsl N + Acc, F1, F2);
dg_read_field_def_ProtocolSceneInit(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ProtocolSceneInit_unit_adds(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_ProtocolSceneInit_dot_adds(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolSceneInit(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ProtocolSceneInit(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ProtocolSceneInit(Rest, 0, 0, F1,
							F2);
	    5 -> skip_32_ProtocolSceneInit(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ProtocolSceneInit(<<>>, 0, 0, F1,
				    F2) ->
    #'ProtocolSceneInit'{unit_adds = F1, dot_adds = F2}.

d_field_ProtocolSceneInit_unit_adds(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolSceneInit_unit_adds(Rest, N + 7,
					X bsl N + Acc, F1, F2);
d_field_ProtocolSceneInit_unit_adds(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolUnitAdd'),
    dfp_read_field_def_ProtocolSceneInit(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_ProtocolUnitAdd(F1,
									  NewFValue)
					 end,
					 F2).


d_field_ProtocolSceneInit_dot_adds(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolSceneInit_dot_adds(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
d_field_ProtocolSceneInit_dot_adds(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolDotAdd'),
    dfp_read_field_def_ProtocolSceneInit(Rest2, 0, 0, F1,
					 if F2 == undefined -> NewFValue;
					    true ->
						merge_msg_ProtocolDotAdd(F2,
									 NewFValue)
					 end).


skip_varint_ProtocolSceneInit(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    skip_varint_ProtocolSceneInit(Rest, Z1, Z2, F1, F2);
skip_varint_ProtocolSceneInit(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    dfp_read_field_def_ProtocolSceneInit(Rest, Z1, Z2, F1,
					 F2).


skip_length_delimited_ProtocolSceneInit(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ProtocolSceneInit(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
skip_length_delimited_ProtocolSceneInit(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolSceneInit(Rest2, 0, 0, F1,
					 F2).


skip_32_ProtocolSceneInit(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_ProtocolSceneInit(Rest, Z1, Z2, F1,
					 F2).


skip_64_ProtocolSceneInit(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_ProtocolSceneInit(Rest, Z1, Z2, F1,
					 F2).


d_msg_ProtocolDotRemove(Bin) ->
    dfp_read_field_def_ProtocolDotRemove(Bin, 0, 0, []).

dfp_read_field_def_ProtocolDotRemove(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    d_field_ProtocolDotRemove_ids(Rest, Z1, Z2, F1);
dfp_read_field_def_ProtocolDotRemove(<<>>, 0, 0, F1) ->
    #'ProtocolDotRemove'{ids = lists:reverse(F1)};
dfp_read_field_def_ProtocolDotRemove(Other, Z1, Z2,
				     F1) ->
    dg_read_field_def_ProtocolDotRemove(Other, Z1, Z2, F1).

dg_read_field_def_ProtocolDotRemove(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolDotRemove(Rest, N + 7,
					X bsl N + Acc, F1);
dg_read_field_def_ProtocolDotRemove(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ProtocolDotRemove_ids(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolDotRemove(Rest, 0, 0, F1);
	    1 -> skip_64_ProtocolDotRemove(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_ProtocolDotRemove(Rest, 0, 0, F1);
	    5 -> skip_32_ProtocolDotRemove(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_ProtocolDotRemove(<<>>, 0, 0, F1) ->
    #'ProtocolDotRemove'{ids = lists:reverse(F1)}.

d_field_ProtocolDotRemove_ids(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    d_field_ProtocolDotRemove_ids(Rest, N + 7,
				  X bsl N + Acc, F1);
d_field_ProtocolDotRemove_ids(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolDotRemove(Rest2, 0, 0,
					 [NewFValue | F1]).


skip_varint_ProtocolDotRemove(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1) ->
    skip_varint_ProtocolDotRemove(Rest, Z1, Z2, F1);
skip_varint_ProtocolDotRemove(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1) ->
    dfp_read_field_def_ProtocolDotRemove(Rest, Z1, Z2, F1).


skip_length_delimited_ProtocolDotRemove(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_ProtocolDotRemove(Rest, N + 7,
					    X bsl N + Acc, F1);
skip_length_delimited_ProtocolDotRemove(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolDotRemove(Rest2, 0, 0, F1).


skip_32_ProtocolDotRemove(<<_:32, Rest/binary>>, Z1, Z2,
			  F1) ->
    dfp_read_field_def_ProtocolDotRemove(Rest, Z1, Z2, F1).


skip_64_ProtocolDotRemove(<<_:64, Rest/binary>>, Z1, Z2,
			  F1) ->
    dfp_read_field_def_ProtocolDotRemove(Rest, Z1, Z2, F1).


d_msg_ProtocolUnitRemove(Bin) ->
    dfp_read_field_def_ProtocolUnitRemove(Bin, 0, 0, []).

dfp_read_field_def_ProtocolUnitRemove(<<10,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    d_field_ProtocolUnitRemove_ids(Rest, Z1, Z2, F1);
dfp_read_field_def_ProtocolUnitRemove(<<>>, 0, 0, F1) ->
    #'ProtocolUnitRemove'{ids = lists:reverse(F1)};
dfp_read_field_def_ProtocolUnitRemove(Other, Z1, Z2,
				      F1) ->
    dg_read_field_def_ProtocolUnitRemove(Other, Z1, Z2, F1).

dg_read_field_def_ProtocolUnitRemove(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolUnitRemove(Rest, N + 7,
					 X bsl N + Acc, F1);
dg_read_field_def_ProtocolUnitRemove(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ProtocolUnitRemove_ids(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolUnitRemove(Rest, 0, 0, F1);
	    1 -> skip_64_ProtocolUnitRemove(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_ProtocolUnitRemove(Rest, 0, 0,
							 F1);
	    5 -> skip_32_ProtocolUnitRemove(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_ProtocolUnitRemove(<<>>, 0, 0, F1) ->
    #'ProtocolUnitRemove'{ids = lists:reverse(F1)}.

d_field_ProtocolUnitRemove_ids(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 57 ->
    d_field_ProtocolUnitRemove_ids(Rest, N + 7,
				   X bsl N + Acc, F1);
d_field_ProtocolUnitRemove_ids(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolUnitRemove(Rest2, 0, 0,
					  [NewFValue | F1]).


skip_varint_ProtocolUnitRemove(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1) ->
    skip_varint_ProtocolUnitRemove(Rest, Z1, Z2, F1);
skip_varint_ProtocolUnitRemove(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1) ->
    dfp_read_field_def_ProtocolUnitRemove(Rest, Z1, Z2, F1).


skip_length_delimited_ProtocolUnitRemove(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_ProtocolUnitRemove(Rest, N + 7,
					     X bsl N + Acc, F1);
skip_length_delimited_ProtocolUnitRemove(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolUnitRemove(Rest2, 0, 0, F1).


skip_32_ProtocolUnitRemove(<<_:32, Rest/binary>>, Z1,
			   Z2, F1) ->
    dfp_read_field_def_ProtocolUnitRemove(Rest, Z1, Z2, F1).


skip_64_ProtocolUnitRemove(<<_:64, Rest/binary>>, Z1,
			   Z2, F1) ->
    dfp_read_field_def_ProtocolUnitRemove(Rest, Z1, Z2, F1).


d_msg_ProtocolSceneSync(Bin) ->
    dfp_read_field_def_ProtocolSceneSync(Bin, 0, 0,
					 undefined, undefined, undefined,
					 undefined).

dfp_read_field_def_ProtocolSceneSync(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4) ->
    d_field_ProtocolSceneSync_unit_updates(Rest, Z1, Z2, F1,
					   F2, F3, F4);
dfp_read_field_def_ProtocolSceneSync(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4) ->
    d_field_ProtocolSceneSync_unit_removes(Rest, Z1, Z2, F1,
					   F2, F3, F4);
dfp_read_field_def_ProtocolSceneSync(<<26,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4) ->
    d_field_ProtocolSceneSync_dot_adds(Rest, Z1, Z2, F1, F2,
				       F3, F4);
dfp_read_field_def_ProtocolSceneSync(<<34,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4) ->
    d_field_ProtocolSceneSync_dot_removes(Rest, Z1, Z2, F1,
					  F2, F3, F4);
dfp_read_field_def_ProtocolSceneSync(<<>>, 0, 0, F1, F2,
				     F3, F4) ->
    #'ProtocolSceneSync'{unit_updates = F1,
			 unit_removes = F2, dot_adds = F3, dot_removes = F4};
dfp_read_field_def_ProtocolSceneSync(Other, Z1, Z2, F1,
				     F2, F3, F4) ->
    dg_read_field_def_ProtocolSceneSync(Other, Z1, Z2, F1,
					F2, F3, F4).

dg_read_field_def_ProtocolSceneSync(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolSceneSync(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_ProtocolSceneSync(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ProtocolSceneSync_unit_updates(Rest, 0, 0, F1,
						 F2, F3, F4);
      18 ->
	  d_field_ProtocolSceneSync_unit_removes(Rest, 0, 0, F1,
						 F2, F3, F4);
      26 ->
	  d_field_ProtocolSceneSync_dot_adds(Rest, 0, 0, F1, F2,
					     F3, F4);
      34 ->
	  d_field_ProtocolSceneSync_dot_removes(Rest, 0, 0, F1,
						F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ProtocolSceneSync(Rest, 0, 0, F1, F2, F3,
					      F4);
	    1 ->
		skip_64_ProtocolSceneSync(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_ProtocolSceneSync(Rest, 0, 0, F1,
							F2, F3, F4);
	    5 ->
		skip_32_ProtocolSceneSync(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_ProtocolSceneSync(<<>>, 0, 0, F1, F2,
				    F3, F4) ->
    #'ProtocolSceneSync'{unit_updates = F1,
			 unit_removes = F2, dot_adds = F3, dot_removes = F4}.

d_field_ProtocolSceneSync_unit_updates(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_ProtocolSceneSync_unit_updates(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4);
d_field_ProtocolSceneSync_unit_updates(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolUnitUpdate'),
    dfp_read_field_def_ProtocolSceneSync(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_ProtocolUnitUpdate(F1,
									     NewFValue)
					 end,
					 F2, F3, F4).


d_field_ProtocolSceneSync_unit_removes(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_ProtocolSceneSync_unit_removes(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4);
d_field_ProtocolSceneSync_unit_removes(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolUnitRemove'),
    dfp_read_field_def_ProtocolSceneSync(Rest2, 0, 0, F1,
					 if F2 == undefined -> NewFValue;
					    true ->
						merge_msg_ProtocolUnitRemove(F2,
									     NewFValue)
					 end,
					 F3, F4).


d_field_ProtocolSceneSync_dot_adds(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_ProtocolSceneSync_dot_adds(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4);
d_field_ProtocolSceneSync_dot_adds(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolDotAdd'),
    dfp_read_field_def_ProtocolSceneSync(Rest2, 0, 0, F1,
					 F2,
					 if F3 == undefined -> NewFValue;
					    true ->
						merge_msg_ProtocolDotAdd(F3,
									 NewFValue)
					 end,
					 F4).


d_field_ProtocolSceneSync_dot_removes(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_ProtocolSceneSync_dot_removes(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4);
d_field_ProtocolSceneSync_dot_removes(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolDotRemove'),
    dfp_read_field_def_ProtocolSceneSync(Rest2, 0, 0, F1,
					 F2, F3,
					 if F4 == undefined -> NewFValue;
					    true ->
						merge_msg_ProtocolDotRemove(F4,
									    NewFValue)
					 end).


skip_varint_ProtocolSceneSync(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4) ->
    skip_varint_ProtocolSceneSync(Rest, Z1, Z2, F1, F2, F3,
				  F4);
skip_varint_ProtocolSceneSync(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_ProtocolSceneSync(Rest, Z1, Z2, F1,
					 F2, F3, F4).


skip_length_delimited_ProtocolSceneSync(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_ProtocolSceneSync(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_ProtocolSceneSync(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolSceneSync(Rest2, 0, 0, F1,
					 F2, F3, F4).


skip_32_ProtocolSceneSync(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4) ->
    dfp_read_field_def_ProtocolSceneSync(Rest, Z1, Z2, F1,
					 F2, F3, F4).


skip_64_ProtocolSceneSync(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4) ->
    dfp_read_field_def_ProtocolSceneSync(Rest, Z1, Z2, F1,
					 F2, F3, F4).


d_msg_ProtocolTimeSync(Bin) ->
    dfp_read_field_def_ProtocolTimeSync(Bin, 0, 0,
					undefined, undefined).

dfp_read_field_def_ProtocolTimeSync(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    d_field_ProtocolTimeSync_client(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolTimeSync(<<16, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    d_field_ProtocolTimeSync_server(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolTimeSync(<<>>, 0, 0, F1,
				    F2) ->
    #'ProtocolTimeSync'{client = F1, server = F2};
dfp_read_field_def_ProtocolTimeSync(Other, Z1, Z2, F1,
				    F2) ->
    dg_read_field_def_ProtocolTimeSync(Other, Z1, Z2, F1,
				       F2).

dg_read_field_def_ProtocolTimeSync(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolTimeSync(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
dg_read_field_def_ProtocolTimeSync(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ProtocolTimeSync_client(Rest, 0, 0, F1, F2);
      16 ->
	  d_field_ProtocolTimeSync_server(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolTimeSync(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ProtocolTimeSync(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ProtocolTimeSync(Rest, 0, 0, F1,
						       F2);
	    5 -> skip_32_ProtocolTimeSync(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ProtocolTimeSync(<<>>, 0, 0, F1,
				   F2) ->
    #'ProtocolTimeSync'{client = F1, server = F2}.

d_field_ProtocolTimeSync_client(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolTimeSync_client(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
d_field_ProtocolTimeSync_client(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_ProtocolTimeSync(Rest, 0, 0,
					NewFValue, F2).


d_field_ProtocolTimeSync_server(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolTimeSync_server(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
d_field_ProtocolTimeSync_server(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_ProtocolTimeSync(Rest, 0, 0, F1,
					NewFValue).


skip_varint_ProtocolTimeSync(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    skip_varint_ProtocolTimeSync(Rest, Z1, Z2, F1, F2);
skip_varint_ProtocolTimeSync(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    dfp_read_field_def_ProtocolTimeSync(Rest, Z1, Z2, F1,
					F2).


skip_length_delimited_ProtocolTimeSync(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ProtocolTimeSync(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
skip_length_delimited_ProtocolTimeSync(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolTimeSync(Rest2, 0, 0, F1,
					F2).


skip_32_ProtocolTimeSync(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    dfp_read_field_def_ProtocolTimeSync(Rest, Z1, Z2, F1,
					F2).


skip_64_ProtocolTimeSync(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    dfp_read_field_def_ProtocolTimeSync(Rest, Z1, Z2, F1,
					F2).




merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'ProtocolVector2'{} ->
	  merge_msg_ProtocolVector2(Prev, New);
      #'ProtocolUnit'{} -> merge_msg_ProtocolUnit(Prev, New);
      #'ProtocolUnitUpdate'{} ->
	  merge_msg_ProtocolUnitUpdate(Prev, New);
      #'ProtocolDot'{} -> merge_msg_ProtocolDot(Prev, New);
      #'ProtocolDotAdd'{} ->
	  merge_msg_ProtocolDotAdd(Prev, New);
      #'ProtocolUnitAdd'{} ->
	  merge_msg_ProtocolUnitAdd(Prev, New);
      #'ProtocolSceneInit'{} ->
	  merge_msg_ProtocolSceneInit(Prev, New);
      #'ProtocolDotRemove'{} ->
	  merge_msg_ProtocolDotRemove(Prev, New);
      #'ProtocolUnitRemove'{} ->
	  merge_msg_ProtocolUnitRemove(Prev, New);
      #'ProtocolSceneSync'{} ->
	  merge_msg_ProtocolSceneSync(Prev, New);
      #'ProtocolTimeSync'{} ->
	  merge_msg_ProtocolTimeSync(Prev, New)
    end.

merge_msg_ProtocolVector2(#'ProtocolVector2'{x = PFx,
					     y = PFy},
			  #'ProtocolVector2'{x = NFx, y = NFy}) ->
    #'ProtocolVector2'{x =
			   if NFx =:= undefined -> PFx;
			      true -> NFx
			   end,
		       y =
			   if NFy =:= undefined -> PFy;
			      true -> NFy
			   end}.

merge_msg_ProtocolUnit(#'ProtocolUnit'{id = PFid,
				       pos = PFpos, towards = PFtowards,
				       status = PFstatus, name = PFname,
				       size = PFsize, color = PFcolor},
		       #'ProtocolUnit'{id = NFid, pos = NFpos,
				       towards = NFtowards, status = NFstatus,
				       name = NFname, size = NFsize,
				       color = NFcolor}) ->
    #'ProtocolUnit'{id =
			if NFid =:= undefined -> PFid;
			   true -> NFid
			end,
		    pos = merge_msg_ProtocolVector2(PFpos, NFpos),
		    towards =
			merge_msg_ProtocolVector2(PFtowards, NFtowards),
		    status =
			if NFstatus =:= undefined -> PFstatus;
			   true -> NFstatus
			end,
		    name =
			if NFname =:= undefined -> PFname;
			   true -> NFname
			end,
		    size =
			if NFsize =:= undefined -> PFsize;
			   true -> NFsize
			end,
		    color =
			if NFcolor =:= undefined -> PFcolor;
			   true -> NFcolor
			end}.

merge_msg_ProtocolUnitUpdate(#'ProtocolUnitUpdate'{milliseconds
						       = PFmilliseconds,
						   units = PFunits},
			     #'ProtocolUnitUpdate'{milliseconds =
						       NFmilliseconds,
						   units = NFunits}) ->
    #'ProtocolUnitUpdate'{milliseconds =
			      if NFmilliseconds =:= undefined -> PFmilliseconds;
				 true -> NFmilliseconds
			      end,
			  units = PFunits ++ NFunits}.

merge_msg_ProtocolDot(#'ProtocolDot'{id = PFid,
				     pos = PFpos, color = PFcolor},
		      #'ProtocolDot'{id = NFid, pos = NFpos,
				     color = NFcolor}) ->
    #'ProtocolDot'{id =
		       if NFid =:= undefined -> PFid;
			  true -> NFid
		       end,
		   pos = merge_msg_ProtocolVector2(PFpos, NFpos),
		   color =
		       if NFcolor =:= undefined -> PFcolor;
			  true -> NFcolor
		       end}.

merge_msg_ProtocolDotAdd(Prev, undefined) -> Prev;
merge_msg_ProtocolDotAdd(undefined, New) -> New;
merge_msg_ProtocolDotAdd(#'ProtocolDotAdd'{dots =
					       PFdots},
			 #'ProtocolDotAdd'{dots = NFdots}) ->
    #'ProtocolDotAdd'{dots = PFdots ++ NFdots}.

merge_msg_ProtocolUnitAdd(#'ProtocolUnitAdd'{units =
						 PFunits},
			  #'ProtocolUnitAdd'{units = NFunits}) ->
    #'ProtocolUnitAdd'{units = PFunits ++ NFunits}.

merge_msg_ProtocolSceneInit(#'ProtocolSceneInit'{unit_adds
						     = PFunit_adds,
						 dot_adds = PFdot_adds},
			    #'ProtocolSceneInit'{unit_adds = NFunit_adds,
						 dot_adds = NFdot_adds}) ->
    #'ProtocolSceneInit'{unit_adds =
			     merge_msg_ProtocolUnitAdd(PFunit_adds,
						       NFunit_adds),
			 dot_adds =
			     merge_msg_ProtocolDotAdd(PFdot_adds, NFdot_adds)}.

merge_msg_ProtocolDotRemove(Prev, undefined) -> Prev;
merge_msg_ProtocolDotRemove(undefined, New) -> New;
merge_msg_ProtocolDotRemove(#'ProtocolDotRemove'{ids =
						     PFids},
			    #'ProtocolDotRemove'{ids = NFids}) ->
    #'ProtocolDotRemove'{ids = PFids ++ NFids}.

merge_msg_ProtocolUnitRemove(Prev, undefined) -> Prev;
merge_msg_ProtocolUnitRemove(undefined, New) -> New;
merge_msg_ProtocolUnitRemove(#'ProtocolUnitRemove'{ids =
						       PFids},
			     #'ProtocolUnitRemove'{ids = NFids}) ->
    #'ProtocolUnitRemove'{ids = PFids ++ NFids}.

merge_msg_ProtocolSceneSync(#'ProtocolSceneSync'{unit_updates
						     = PFunit_updates,
						 unit_removes = PFunit_removes,
						 dot_adds = PFdot_adds,
						 dot_removes = PFdot_removes},
			    #'ProtocolSceneSync'{unit_updates = NFunit_updates,
						 unit_removes = NFunit_removes,
						 dot_adds = NFdot_adds,
						 dot_removes =
						     NFdot_removes}) ->
    #'ProtocolSceneSync'{unit_updates =
			     merge_msg_ProtocolUnitUpdate(PFunit_updates,
							  NFunit_updates),
			 unit_removes =
			     merge_msg_ProtocolUnitRemove(PFunit_removes,
							  NFunit_removes),
			 dot_adds =
			     merge_msg_ProtocolDotAdd(PFdot_adds, NFdot_adds),
			 dot_removes =
			     merge_msg_ProtocolDotRemove(PFdot_removes,
							 NFdot_removes)}.

merge_msg_ProtocolTimeSync(#'ProtocolTimeSync'{client =
						   PFclient,
					       server = PFserver},
			   #'ProtocolTimeSync'{client = NFclient,
					       server = NFserver}) ->
    #'ProtocolTimeSync'{client =
			    if NFclient =:= undefined -> PFclient;
			       true -> NFclient
			    end,
			server =
			    if NFserver =:= undefined -> PFserver;
			       true -> NFserver
			    end}.



verify_msg(Msg) ->
    case Msg of
      #'ProtocolVector2'{} ->
	  v_msg_ProtocolVector2(Msg, ['ProtocolVector2']);
      #'ProtocolUnit'{} ->
	  v_msg_ProtocolUnit(Msg, ['ProtocolUnit']);
      #'ProtocolUnitUpdate'{} ->
	  v_msg_ProtocolUnitUpdate(Msg, ['ProtocolUnitUpdate']);
      #'ProtocolDot'{} ->
	  v_msg_ProtocolDot(Msg, ['ProtocolDot']);
      #'ProtocolDotAdd'{} ->
	  v_msg_ProtocolDotAdd(Msg, ['ProtocolDotAdd']);
      #'ProtocolUnitAdd'{} ->
	  v_msg_ProtocolUnitAdd(Msg, ['ProtocolUnitAdd']);
      #'ProtocolSceneInit'{} ->
	  v_msg_ProtocolSceneInit(Msg, ['ProtocolSceneInit']);
      #'ProtocolDotRemove'{} ->
	  v_msg_ProtocolDotRemove(Msg, ['ProtocolDotRemove']);
      #'ProtocolUnitRemove'{} ->
	  v_msg_ProtocolUnitRemove(Msg, ['ProtocolUnitRemove']);
      #'ProtocolSceneSync'{} ->
	  v_msg_ProtocolSceneSync(Msg, ['ProtocolSceneSync']);
      #'ProtocolTimeSync'{} ->
	  v_msg_ProtocolTimeSync(Msg, ['ProtocolTimeSync']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_ProtocolVector2(#'ProtocolVector2'{x = F1,
					 y = F2},
		      Path) ->
    v_type_float(F1, [x | Path]),
    v_type_float(F2, [y | Path]),
    ok;
v_msg_ProtocolVector2(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolVector2'}, X,
		  Path).

v_msg_ProtocolUnit(#'ProtocolUnit'{id = F1, pos = F2,
				   towards = F3, status = F4, name = F5,
				   size = F6, color = F7},
		   Path) ->
    v_type_string(F1, [id | Path]),
    v_msg_ProtocolVector2(F2, [pos | Path]),
    v_msg_ProtocolVector2(F3, [towards | Path]),
    'v_enum_Unit.UnitStatus'(F4, [status | Path]),
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [name | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_float(F6, [size | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_int32(F7, [color | Path])
    end,
    ok;
v_msg_ProtocolUnit(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolUnit'}, X, Path).

v_msg_ProtocolUnitUpdate(#'ProtocolUnitUpdate'{milliseconds
						   = F1,
					       units = F2},
			 Path) ->
    v_type_int64(F1, [milliseconds | Path]),
    if is_list(F2) ->
	   [v_msg_ProtocolUnit(Elem, [units | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ProtocolUnit'}},
			 F2, Path)
    end,
    ok;
v_msg_ProtocolUnitUpdate(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolUnitUpdate'}, X,
		  Path).

v_msg_ProtocolDot(#'ProtocolDot'{id = F1, pos = F2,
				 color = F3},
		  Path) ->
    v_type_string(F1, [id | Path]),
    v_msg_ProtocolVector2(F2, [pos | Path]),
    v_type_int32(F3, [color | Path]),
    ok;
v_msg_ProtocolDot(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolDot'}, X, Path).

v_msg_ProtocolDotAdd(#'ProtocolDotAdd'{dots = F1},
		     Path) ->
    if is_list(F1) ->
	   [v_msg_ProtocolDot(Elem, [dots | Path]) || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ProtocolDot'}},
			 F1, Path)
    end,
    ok;
v_msg_ProtocolDotAdd(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolDotAdd'}, X,
		  Path).

v_msg_ProtocolUnitAdd(#'ProtocolUnitAdd'{units = F1},
		      Path) ->
    if is_list(F1) ->
	   [v_msg_ProtocolUnit(Elem, [units | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ProtocolUnit'}},
			 F1, Path)
    end,
    ok;
v_msg_ProtocolUnitAdd(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolUnitAdd'}, X,
		  Path).

v_msg_ProtocolSceneInit(#'ProtocolSceneInit'{unit_adds =
						 F1,
					     dot_adds = F2},
			Path) ->
    v_msg_ProtocolUnitAdd(F1, [unit_adds | Path]),
    v_msg_ProtocolDotAdd(F2, [dot_adds | Path]),
    ok.

v_msg_ProtocolDotRemove(#'ProtocolDotRemove'{ids = F1},
			Path) ->
    if is_list(F1) ->
	   [v_type_string(Elem, [ids | Path]) || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, string}, F1, Path)
    end,
    ok;
v_msg_ProtocolDotRemove(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolDotRemove'}, X,
		  Path).

v_msg_ProtocolUnitRemove(#'ProtocolUnitRemove'{ids =
						   F1},
			 Path) ->
    if is_list(F1) ->
	   [v_type_string(Elem, [ids | Path]) || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, string}, F1, Path)
    end,
    ok;
v_msg_ProtocolUnitRemove(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolUnitRemove'}, X,
		  Path).

v_msg_ProtocolSceneSync(#'ProtocolSceneSync'{unit_updates
						 = F1,
					     unit_removes = F2, dot_adds = F3,
					     dot_removes = F4},
			Path) ->
    v_msg_ProtocolUnitUpdate(F1, [unit_updates | Path]),
    if F2 == undefined -> ok;
       true ->
	   v_msg_ProtocolUnitRemove(F2, [unit_removes | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_msg_ProtocolDotAdd(F3, [dot_adds | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_ProtocolDotRemove(F4, [dot_removes | Path])
    end,
    ok.

v_msg_ProtocolTimeSync(#'ProtocolTimeSync'{client = F1,
					   server = F2},
		       Path) ->
    v_type_int64(F1, [client | Path]),
    v_type_int64(F2, [server | Path]),
    ok.

'v_enum_Unit.UnitStatus'('Idle', _Path) -> ok;
'v_enum_Unit.UnitStatus'('Move', _Path) -> ok;
'v_enum_Unit.UnitStatus'('Jump', _Path) -> ok;
'v_enum_Unit.UnitStatus'(X, Path) ->
    mk_type_error({invalid_enum, 'Unit.UnitStatus'}, X,
		  Path).

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

v_type_float(N, _Path) when is_float(N) -> ok;
v_type_float(N, _Path) when is_integer(N) -> ok;
v_type_float(X, Path) ->
    mk_type_error(bad_float_value, X, Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{enum, 'Unit.UnitStatus'},
      [{'Idle', 1}, {'Move', 2}, {'Jump', 3}]},
     {{msg, 'ProtocolVector2'},
      [#field{name = x, fnum = 1, rnum = 2, type = float,
	      occurrence = required, opts = []},
       #field{name = y, fnum = 2, rnum = 3, type = float,
	      occurrence = required, opts = []}]},
     {{msg, 'ProtocolUnit'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = pos, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolVector2'}, occurrence = required,
	      opts = []},
       #field{name = towards, fnum = 3, rnum = 4,
	      type = {msg, 'ProtocolVector2'}, occurrence = required,
	      opts = []},
       #field{name = status, fnum = 4, rnum = 5,
	      type = {enum, 'Unit.UnitStatus'}, occurrence = required,
	      opts = []},
       #field{name = name, fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #field{name = size, fnum = 6, rnum = 7, type = float,
	      occurrence = optional, opts = []},
       #field{name = color, fnum = 7, rnum = 8, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtocolUnitUpdate'},
      [#field{name = milliseconds, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []},
       #field{name = units, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolUnit'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'ProtocolDot'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = pos, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolVector2'}, occurrence = required,
	      opts = []},
       #field{name = color, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'ProtocolDotAdd'},
      [#field{name = dots, fnum = 1, rnum = 2,
	      type = {msg, 'ProtocolDot'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'ProtocolUnitAdd'},
      [#field{name = units, fnum = 1, rnum = 2,
	      type = {msg, 'ProtocolUnit'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'ProtocolSceneInit'},
      [#field{name = unit_adds, fnum = 1, rnum = 2,
	      type = {msg, 'ProtocolUnitAdd'}, occurrence = required,
	      opts = []},
       #field{name = dot_adds, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolDotAdd'}, occurrence = required,
	      opts = []}]},
     {{msg, 'ProtocolDotRemove'},
      [#field{name = ids, fnum = 1, rnum = 2, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtocolUnitRemove'},
      [#field{name = ids, fnum = 1, rnum = 2, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtocolSceneSync'},
      [#field{name = unit_updates, fnum = 1, rnum = 2,
	      type = {msg, 'ProtocolUnitUpdate'},
	      occurrence = required, opts = []},
       #field{name = unit_removes, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolUnitRemove'},
	      occurrence = optional, opts = []},
       #field{name = dot_adds, fnum = 3, rnum = 4,
	      type = {msg, 'ProtocolDotAdd'}, occurrence = optional,
	      opts = []},
       #field{name = dot_removes, fnum = 4, rnum = 5,
	      type = {msg, 'ProtocolDotRemove'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtocolTimeSync'},
      [#field{name = client, fnum = 1, rnum = 2, type = int64,
	      occurrence = required, opts = []},
       #field{name = server, fnum = 2, rnum = 3, type = int64,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    ['ProtocolVector2', 'ProtocolUnit',
     'ProtocolUnitUpdate', 'ProtocolDot', 'ProtocolDotAdd',
     'ProtocolUnitAdd', 'ProtocolSceneInit',
     'ProtocolDotRemove', 'ProtocolUnitRemove',
     'ProtocolSceneSync', 'ProtocolTimeSync'].


get_enum_names() -> ['Unit.UnitStatus'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('ProtocolVector2') ->
    [#field{name = x, fnum = 1, rnum = 2, type = float,
	    occurrence = required, opts = []},
     #field{name = y, fnum = 2, rnum = 3, type = float,
	    occurrence = required, opts = []}];
find_msg_def('ProtocolUnit') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = pos, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolVector2'}, occurrence = required,
	    opts = []},
     #field{name = towards, fnum = 3, rnum = 4,
	    type = {msg, 'ProtocolVector2'}, occurrence = required,
	    opts = []},
     #field{name = status, fnum = 4, rnum = 5,
	    type = {enum, 'Unit.UnitStatus'}, occurrence = required,
	    opts = []},
     #field{name = name, fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #field{name = size, fnum = 6, rnum = 7, type = float,
	    occurrence = optional, opts = []},
     #field{name = color, fnum = 7, rnum = 8, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('ProtocolUnitUpdate') ->
    [#field{name = milliseconds, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []},
     #field{name = units, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolUnit'}, occurrence = repeated,
	    opts = []}];
find_msg_def('ProtocolDot') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = pos, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolVector2'}, occurrence = required,
	    opts = []},
     #field{name = color, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('ProtocolDotAdd') ->
    [#field{name = dots, fnum = 1, rnum = 2,
	    type = {msg, 'ProtocolDot'}, occurrence = repeated,
	    opts = []}];
find_msg_def('ProtocolUnitAdd') ->
    [#field{name = units, fnum = 1, rnum = 2,
	    type = {msg, 'ProtocolUnit'}, occurrence = repeated,
	    opts = []}];
find_msg_def('ProtocolSceneInit') ->
    [#field{name = unit_adds, fnum = 1, rnum = 2,
	    type = {msg, 'ProtocolUnitAdd'}, occurrence = required,
	    opts = []},
     #field{name = dot_adds, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolDotAdd'}, occurrence = required,
	    opts = []}];
find_msg_def('ProtocolDotRemove') ->
    [#field{name = ids, fnum = 1, rnum = 2, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def('ProtocolUnitRemove') ->
    [#field{name = ids, fnum = 1, rnum = 2, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def('ProtocolSceneSync') ->
    [#field{name = unit_updates, fnum = 1, rnum = 2,
	    type = {msg, 'ProtocolUnitUpdate'},
	    occurrence = required, opts = []},
     #field{name = unit_removes, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolUnitRemove'},
	    occurrence = optional, opts = []},
     #field{name = dot_adds, fnum = 3, rnum = 4,
	    type = {msg, 'ProtocolDotAdd'}, occurrence = optional,
	    opts = []},
     #field{name = dot_removes, fnum = 4, rnum = 5,
	    type = {msg, 'ProtocolDotRemove'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtocolTimeSync') ->
    [#field{name = client, fnum = 1, rnum = 2, type = int64,
	    occurrence = required, opts = []},
     #field{name = server, fnum = 2, rnum = 3, type = int64,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('Unit.UnitStatus') ->
    [{'Idle', 1}, {'Move', 2}, {'Jump', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('Unit.UnitStatus', Value) ->
    'enum_symbol_by_value_Unit.UnitStatus'(Value).


enum_value_by_symbol('Unit.UnitStatus', Sym) ->
    'enum_value_by_symbol_Unit.UnitStatus'(Sym).


'enum_symbol_by_value_Unit.UnitStatus'(1) -> 'Idle';
'enum_symbol_by_value_Unit.UnitStatus'(2) -> 'Move';
'enum_symbol_by_value_Unit.UnitStatus'(3) -> 'Jump'.


'enum_value_by_symbol_Unit.UnitStatus'('Idle') -> 1;
'enum_value_by_symbol_Unit.UnitStatus'('Move') -> 2;
'enum_value_by_symbol_Unit.UnitStatus'('Jump') -> 3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.18.4".

gpb_version_as_list() ->
    [3,18,4].
