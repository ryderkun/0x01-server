%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.18.4 on {{2015,6,17},{0,23,51}}
-module(protocol).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("protocol.hrl").
-include("gpb.hrl").


encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'ProtocolVector2'{} -> e_msg_ProtocolVector2(Msg);
      #'ProtocolUnitCreate'{} ->
	  e_msg_ProtocolUnitCreate(Msg);
      #'ProtocolUnitMove'{} -> e_msg_ProtocolUnitMove(Msg);
      #'ProtocolDot'{} -> e_msg_ProtocolDot(Msg);
      #'ProtocolUnit'{} -> e_msg_ProtocolUnit(Msg);
      #'ProtocolSceneInit'{} -> e_msg_ProtocolSceneInit(Msg);
      #'ProtocolUnitAdd'{} -> e_msg_ProtocolUnitAdd(Msg);
      #'ProtocolSceneSync'{} -> e_msg_ProtocolSceneSync(Msg);
      #'ProtocolUnitSpeedNormal'{} ->
	  e_msg_ProtocolUnitSpeedNormal(Msg);
      #'ProtocolConfig'{} -> e_msg_ProtocolConfig(Msg);
      #'ProtocolTimeSync'{} -> e_msg_ProtocolTimeSync(Msg);
      #'ProtocolUnitSpeedUp'{} ->
	  e_msg_ProtocolUnitSpeedUp(Msg)
    end.


e_msg_ProtocolVector2(Msg) ->
    e_msg_ProtocolVector2(Msg, <<>>).


e_msg_ProtocolVector2(#'ProtocolVector2'{x = F1,
					 y = F2},
		      Bin) ->
    B1 = e_type_float(F1, <<Bin/binary, 13>>),
    e_type_float(F2, <<B1/binary, 21>>).

e_msg_ProtocolUnitCreate(Msg) ->
    e_msg_ProtocolUnitCreate(Msg, <<>>).


e_msg_ProtocolUnitCreate(#'ProtocolUnitCreate'{name =
						   F1,
					       pos = F2},
			 Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    e_mfield_ProtocolUnitCreate_pos(F2, <<B1/binary, 18>>).

e_msg_ProtocolUnitMove(Msg) ->
    e_msg_ProtocolUnitMove(Msg, <<>>).


e_msg_ProtocolUnitMove(#'ProtocolUnitMove'{target = F1},
		       Bin) ->
    e_mfield_ProtocolUnitMove_target(F1,
				     <<Bin/binary, 10>>).

e_msg_ProtocolDot(Msg) -> e_msg_ProtocolDot(Msg, <<>>).


e_msg_ProtocolDot(#'ProtocolDot'{id = F1, pos = F2,
				 color = F3},
		  Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_ProtocolDot_pos(F2, <<B1/binary, 18>>),
    e_type_int32(F3, <<B2/binary, 24>>).

e_msg_ProtocolUnit(Msg) ->
    e_msg_ProtocolUnit(Msg, <<>>).


e_msg_ProtocolUnit(#'ProtocolUnit'{id = F1, pos = F2,
				   size = F3, name = F4, color = F5},
		   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_ProtocolUnit_pos(F2, <<B1/binary, 18>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_type_float(F3, <<B2/binary, 29>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_type_int32(F5, <<B4/binary, 40>>)
    end.

e_msg_ProtocolSceneInit(Msg) ->
    e_msg_ProtocolSceneInit(Msg, <<>>).


e_msg_ProtocolSceneInit(#'ProtocolSceneInit'{unit_adds =
						 F1,
					     dot_adds = F2},
			Bin) ->
    B1 = if F1 == [] -> Bin;
	    true -> e_field_ProtocolSceneInit_unit_adds(F1, Bin)
	 end,
    if F2 == [] -> B1;
       true -> e_field_ProtocolSceneInit_dot_adds(F2, B1)
    end.

e_msg_ProtocolUnitAdd(Msg) ->
    e_msg_ProtocolUnitAdd(Msg, <<>>).


e_msg_ProtocolUnitAdd(#'ProtocolUnitAdd'{is_own = F1,
					 units = F2},
		      Bin) ->
    B1 = e_type_bool(F1, <<Bin/binary, 8>>),
    if F2 == [] -> B1;
       true -> e_field_ProtocolUnitAdd_units(F2, B1)
    end.

e_msg_ProtocolSceneSync(Msg) ->
    e_msg_ProtocolSceneSync(Msg, <<>>).


e_msg_ProtocolSceneSync(#'ProtocolSceneSync'{update_at =
						 F1,
					     unit_updates = F2,
					     unit_removes = F3, dot_adds = F4,
					     dot_removes = F5},
			Bin) ->
    B1 = e_type_int64(F1, <<Bin/binary, 8>>),
    B2 = if F2 == [] -> B1;
	    true -> e_field_ProtocolSceneSync_unit_updates(F2, B1)
	 end,
    B3 = if F3 == [] -> B2;
	    true -> e_field_ProtocolSceneSync_unit_removes(F3, B2)
	 end,
    B4 = if F4 == [] -> B3;
	    true -> e_field_ProtocolSceneSync_dot_adds(F4, B3)
	 end,
    if F5 == [] -> B4;
       true -> e_field_ProtocolSceneSync_dot_removes(F5, B4)
    end.

e_msg_ProtocolUnitSpeedNormal(_Msg) -> <<>>.

e_msg_ProtocolConfig(Msg) ->
    e_msg_ProtocolConfig(Msg, <<>>).


e_msg_ProtocolConfig(#'ProtocolConfig'{sync_interval =
					   F1,
				       map_x = F2, map_y = F3},
		     Bin) ->
    B1 = e_type_float(F1, <<Bin/binary, 13>>),
    B2 = e_type_int32(F2, <<B1/binary, 16>>),
    e_type_int32(F3, <<B2/binary, 24>>).

e_msg_ProtocolTimeSync(Msg) ->
    e_msg_ProtocolTimeSync(Msg, <<>>).


e_msg_ProtocolTimeSync(#'ProtocolTimeSync'{client = F1,
					   server = F2},
		       Bin) ->
    B1 = e_type_int64(F1, <<Bin/binary, 8>>),
    e_type_int64(F2, <<B1/binary, 16>>).

e_msg_ProtocolUnitSpeedUp(_Msg) -> <<>>.

e_mfield_ProtocolUnitCreate_pos(Msg, Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    e_msg_ProtocolVector2(Msg, Bin2).

e_mfield_ProtocolUnitMove_target(Msg, Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    e_msg_ProtocolVector2(Msg, Bin2).

e_mfield_ProtocolDot_pos(Msg, Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    e_msg_ProtocolVector2(Msg, Bin2).

e_mfield_ProtocolUnit_pos(Msg, Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    e_msg_ProtocolVector2(Msg, Bin2).

e_mfield_ProtocolSceneInit_unit_adds(Msg, Bin) ->
    SubBin = e_msg_ProtocolUnit(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ProtocolSceneInit_unit_adds([Elem | Rest],
				    Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ProtocolSceneInit_unit_adds(Elem, Bin2),
    e_field_ProtocolSceneInit_unit_adds(Rest, Bin3);
e_field_ProtocolSceneInit_unit_adds([], Bin) -> Bin.

e_mfield_ProtocolSceneInit_dot_adds(Msg, Bin) ->
    SubBin = e_msg_ProtocolDot(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ProtocolSceneInit_dot_adds([Elem | Rest],
				   Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_ProtocolSceneInit_dot_adds(Elem, Bin2),
    e_field_ProtocolSceneInit_dot_adds(Rest, Bin3);
e_field_ProtocolSceneInit_dot_adds([], Bin) -> Bin.

e_mfield_ProtocolUnitAdd_units(Msg, Bin) ->
    SubBin = e_msg_ProtocolUnit(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ProtocolUnitAdd_units([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_ProtocolUnitAdd_units(Elem, Bin2),
    e_field_ProtocolUnitAdd_units(Rest, Bin3);
e_field_ProtocolUnitAdd_units([], Bin) -> Bin.

e_mfield_ProtocolSceneSync_unit_updates(Msg, Bin) ->
    SubBin = e_msg_ProtocolUnit(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ProtocolSceneSync_unit_updates([Elem | Rest],
				       Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_ProtocolSceneSync_unit_updates(Elem,
						   Bin2),
    e_field_ProtocolSceneSync_unit_updates(Rest, Bin3);
e_field_ProtocolSceneSync_unit_updates([], Bin) -> Bin.

e_field_ProtocolSceneSync_unit_removes([Elem | Rest],
				       Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(Elem, Bin2),
    e_field_ProtocolSceneSync_unit_removes(Rest, Bin3);
e_field_ProtocolSceneSync_unit_removes([], Bin) -> Bin.

e_mfield_ProtocolSceneSync_dot_adds(Msg, Bin) ->
    SubBin = e_msg_ProtocolDot(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ProtocolSceneSync_dot_adds([Elem | Rest],
				   Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_ProtocolSceneSync_dot_adds(Elem, Bin2),
    e_field_ProtocolSceneSync_dot_adds(Rest, Bin3);
e_field_ProtocolSceneSync_dot_adds([], Bin) -> Bin.

e_field_ProtocolSceneSync_dot_removes([Elem | Rest],
				      Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_string(Elem, Bin2),
    e_field_ProtocolSceneSync_dot_removes(Rest, Bin3);
e_field_ProtocolSceneSync_dot_removes([], Bin) -> Bin.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:32/unsigned-native>> = <<Value:32/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_float(Value, Bin) ->
    <<Bin/binary, Value:32/little-float>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'ProtocolVector2' -> d_msg_ProtocolVector2(Bin);
      'ProtocolUnitCreate' -> d_msg_ProtocolUnitCreate(Bin);
      'ProtocolUnitMove' -> d_msg_ProtocolUnitMove(Bin);
      'ProtocolDot' -> d_msg_ProtocolDot(Bin);
      'ProtocolUnit' -> d_msg_ProtocolUnit(Bin);
      'ProtocolSceneInit' -> d_msg_ProtocolSceneInit(Bin);
      'ProtocolUnitAdd' -> d_msg_ProtocolUnitAdd(Bin);
      'ProtocolSceneSync' -> d_msg_ProtocolSceneSync(Bin);
      'ProtocolUnitSpeedNormal' ->
	  d_msg_ProtocolUnitSpeedNormal(Bin);
      'ProtocolConfig' -> d_msg_ProtocolConfig(Bin);
      'ProtocolTimeSync' -> d_msg_ProtocolTimeSync(Bin);
      'ProtocolUnitSpeedUp' -> d_msg_ProtocolUnitSpeedUp(Bin)
    end.



d_msg_ProtocolVector2(Bin) ->
    dfp_read_field_def_ProtocolVector2(Bin, 0, 0, undefined,
				       undefined).

dfp_read_field_def_ProtocolVector2(<<13, Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    d_field_ProtocolVector2_x(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolVector2(<<21, Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    d_field_ProtocolVector2_y(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolVector2(<<>>, 0, 0, F1,
				   F2) ->
    #'ProtocolVector2'{x = F1, y = F2};
dfp_read_field_def_ProtocolVector2(Other, Z1, Z2, F1,
				   F2) ->
    dg_read_field_def_ProtocolVector2(Other, Z1, Z2, F1,
				      F2).

dg_read_field_def_ProtocolVector2(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolVector2(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
dg_read_field_def_ProtocolVector2(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      13 -> d_field_ProtocolVector2_x(Rest, 0, 0, F1, F2);
      21 -> d_field_ProtocolVector2_y(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolVector2(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ProtocolVector2(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ProtocolVector2(Rest, 0, 0, F1,
						      F2);
	    5 -> skip_32_ProtocolVector2(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ProtocolVector2(<<>>, 0, 0, F1, F2) ->
    #'ProtocolVector2'{x = F1, y = F2}.

d_field_ProtocolVector2_x(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, _, F2) ->
    dfp_read_field_def_ProtocolVector2(Rest, Z1, Z2, Value,
				       F2).


d_field_ProtocolVector2_y(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, F1, _) ->
    dfp_read_field_def_ProtocolVector2(Rest, Z1, Z2, F1,
				       Value).


skip_varint_ProtocolVector2(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2) ->
    skip_varint_ProtocolVector2(Rest, Z1, Z2, F1, F2);
skip_varint_ProtocolVector2(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2) ->
    dfp_read_field_def_ProtocolVector2(Rest, Z1, Z2, F1,
				       F2).


skip_length_delimited_ProtocolVector2(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ProtocolVector2(Rest, N + 7,
					  X bsl N + Acc, F1, F2);
skip_length_delimited_ProtocolVector2(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolVector2(Rest2, 0, 0, F1, F2).


skip_32_ProtocolVector2(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2) ->
    dfp_read_field_def_ProtocolVector2(Rest, Z1, Z2, F1,
				       F2).


skip_64_ProtocolVector2(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2) ->
    dfp_read_field_def_ProtocolVector2(Rest, Z1, Z2, F1,
				       F2).


d_msg_ProtocolUnitCreate(Bin) ->
    dfp_read_field_def_ProtocolUnitCreate(Bin, 0, 0,
					  undefined, undefined).

dfp_read_field_def_ProtocolUnitCreate(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2) ->
    d_field_ProtocolUnitCreate_name(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolUnitCreate(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2) ->
    d_field_ProtocolUnitCreate_pos(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolUnitCreate(<<>>, 0, 0, F1,
				      F2) ->
    #'ProtocolUnitCreate'{name = F1, pos = F2};
dfp_read_field_def_ProtocolUnitCreate(Other, Z1, Z2, F1,
				      F2) ->
    dg_read_field_def_ProtocolUnitCreate(Other, Z1, Z2, F1,
					 F2).

dg_read_field_def_ProtocolUnitCreate(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolUnitCreate(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
dg_read_field_def_ProtocolUnitCreate(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ProtocolUnitCreate_name(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_ProtocolUnitCreate_pos(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolUnitCreate(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ProtocolUnitCreate(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ProtocolUnitCreate(Rest, 0, 0, F1,
							 F2);
	    5 -> skip_32_ProtocolUnitCreate(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ProtocolUnitCreate(<<>>, 0, 0, F1,
				     F2) ->
    #'ProtocolUnitCreate'{name = F1, pos = F2}.

d_field_ProtocolUnitCreate_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolUnitCreate_name(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
d_field_ProtocolUnitCreate_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolUnitCreate(Rest2, 0, 0,
					  NewFValue, F2).


d_field_ProtocolUnitCreate_pos(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolUnitCreate_pos(Rest, N + 7,
				   X bsl N + Acc, F1, F2);
d_field_ProtocolUnitCreate_pos(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolVector2'),
    dfp_read_field_def_ProtocolUnitCreate(Rest2, 0, 0, F1,
					  if F2 == undefined -> NewFValue;
					     true ->
						 merge_msg_ProtocolVector2(F2,
									   NewFValue)
					  end).


skip_varint_ProtocolUnitCreate(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    skip_varint_ProtocolUnitCreate(Rest, Z1, Z2, F1, F2);
skip_varint_ProtocolUnitCreate(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    dfp_read_field_def_ProtocolUnitCreate(Rest, Z1, Z2, F1,
					  F2).


skip_length_delimited_ProtocolUnitCreate(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ProtocolUnitCreate(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
skip_length_delimited_ProtocolUnitCreate(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolUnitCreate(Rest2, 0, 0, F1,
					  F2).


skip_32_ProtocolUnitCreate(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2) ->
    dfp_read_field_def_ProtocolUnitCreate(Rest, Z1, Z2, F1,
					  F2).


skip_64_ProtocolUnitCreate(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2) ->
    dfp_read_field_def_ProtocolUnitCreate(Rest, Z1, Z2, F1,
					  F2).


d_msg_ProtocolUnitMove(Bin) ->
    dfp_read_field_def_ProtocolUnitMove(Bin, 0, 0,
					undefined).

dfp_read_field_def_ProtocolUnitMove(<<10, Rest/binary>>,
				    Z1, Z2, F1) ->
    d_field_ProtocolUnitMove_target(Rest, Z1, Z2, F1);
dfp_read_field_def_ProtocolUnitMove(<<>>, 0, 0, F1) ->
    #'ProtocolUnitMove'{target = F1};
dfp_read_field_def_ProtocolUnitMove(Other, Z1, Z2,
				    F1) ->
    dg_read_field_def_ProtocolUnitMove(Other, Z1, Z2, F1).

dg_read_field_def_ProtocolUnitMove(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolUnitMove(Rest, N + 7,
				       X bsl N + Acc, F1);
dg_read_field_def_ProtocolUnitMove(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ProtocolUnitMove_target(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolUnitMove(Rest, 0, 0, F1);
	    1 -> skip_64_ProtocolUnitMove(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_ProtocolUnitMove(Rest, 0, 0, F1);
	    5 -> skip_32_ProtocolUnitMove(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_ProtocolUnitMove(<<>>, 0, 0, F1) ->
    #'ProtocolUnitMove'{target = F1}.

d_field_ProtocolUnitMove_target(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1)
    when N < 57 ->
    d_field_ProtocolUnitMove_target(Rest, N + 7,
				    X bsl N + Acc, F1);
d_field_ProtocolUnitMove_target(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolVector2'),
    dfp_read_field_def_ProtocolUnitMove(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       merge_msg_ProtocolVector2(F1,
									 NewFValue)
					end).


skip_varint_ProtocolUnitMove(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    skip_varint_ProtocolUnitMove(Rest, Z1, Z2, F1);
skip_varint_ProtocolUnitMove(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    dfp_read_field_def_ProtocolUnitMove(Rest, Z1, Z2, F1).


skip_length_delimited_ProtocolUnitMove(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_ProtocolUnitMove(Rest, N + 7,
					   X bsl N + Acc, F1);
skip_length_delimited_ProtocolUnitMove(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolUnitMove(Rest2, 0, 0, F1).


skip_32_ProtocolUnitMove(<<_:32, Rest/binary>>, Z1, Z2,
			 F1) ->
    dfp_read_field_def_ProtocolUnitMove(Rest, Z1, Z2, F1).


skip_64_ProtocolUnitMove(<<_:64, Rest/binary>>, Z1, Z2,
			 F1) ->
    dfp_read_field_def_ProtocolUnitMove(Rest, Z1, Z2, F1).


d_msg_ProtocolDot(Bin) ->
    dfp_read_field_def_ProtocolDot(Bin, 0, 0, undefined,
				   undefined, undefined).

dfp_read_field_def_ProtocolDot(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_ProtocolDot_id(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_ProtocolDot(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_ProtocolDot_pos(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_ProtocolDot(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_ProtocolDot_color(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_ProtocolDot(<<>>, 0, 0, F1, F2,
			       F3) ->
    #'ProtocolDot'{id = F1, pos = F2, color = F3};
dfp_read_field_def_ProtocolDot(Other, Z1, Z2, F1, F2,
			       F3) ->
    dg_read_field_def_ProtocolDot(Other, Z1, Z2, F1, F2,
				  F3).

dg_read_field_def_ProtocolDot(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolDot(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
dg_read_field_def_ProtocolDot(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ProtocolDot_id(Rest, 0, 0, F1, F2, F3);
      18 -> d_field_ProtocolDot_pos(Rest, 0, 0, F1, F2, F3);
      24 -> d_field_ProtocolDot_color(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolDot(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_ProtocolDot(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_ProtocolDot(Rest, 0, 0, F1, F2,
						  F3);
	    5 -> skip_32_ProtocolDot(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_ProtocolDot(<<>>, 0, 0, F1, F2, F3) ->
    #'ProtocolDot'{id = F1, pos = F2, color = F3}.

d_field_ProtocolDot_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ProtocolDot_id(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3);
d_field_ProtocolDot_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolDot(Rest2, 0, 0, NewFValue,
				   F2, F3).


d_field_ProtocolDot_pos(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ProtocolDot_pos(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3);
d_field_ProtocolDot_pos(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolVector2'),
    dfp_read_field_def_ProtocolDot(Rest2, 0, 0, F1,
				   if F2 == undefined -> NewFValue;
				      true ->
					  merge_msg_ProtocolVector2(F2,
								    NewFValue)
				   end,
				   F3).


d_field_ProtocolDot_color(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ProtocolDot_color(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3);
d_field_ProtocolDot_color(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ProtocolDot(Rest, 0, 0, F1, F2,
				   NewFValue).


skip_varint_ProtocolDot(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    skip_varint_ProtocolDot(Rest, Z1, Z2, F1, F2, F3);
skip_varint_ProtocolDot(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    dfp_read_field_def_ProtocolDot(Rest, Z1, Z2, F1, F2,
				   F3).


skip_length_delimited_ProtocolDot(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_ProtocolDot(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
skip_length_delimited_ProtocolDot(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolDot(Rest2, 0, 0, F1, F2, F3).


skip_32_ProtocolDot(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_ProtocolDot(Rest, Z1, Z2, F1, F2,
				   F3).


skip_64_ProtocolDot(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_ProtocolDot(Rest, Z1, Z2, F1, F2,
				   F3).


d_msg_ProtocolUnit(Bin) ->
    dfp_read_field_def_ProtocolUnit(Bin, 0, 0, undefined,
				    undefined, undefined, undefined, undefined).

dfp_read_field_def_ProtocolUnit(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_ProtocolUnit_id(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5);
dfp_read_field_def_ProtocolUnit(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_ProtocolUnit_pos(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5);
dfp_read_field_def_ProtocolUnit(<<29, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_ProtocolUnit_size(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5);
dfp_read_field_def_ProtocolUnit(<<34, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_ProtocolUnit_name(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5);
dfp_read_field_def_ProtocolUnit(<<40, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_ProtocolUnit_color(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5);
dfp_read_field_def_ProtocolUnit(<<>>, 0, 0, F1, F2, F3,
				F4, F5) ->
    #'ProtocolUnit'{id = F1, pos = F2, size = F3, name = F4,
		    color = F5};
dfp_read_field_def_ProtocolUnit(Other, Z1, Z2, F1, F2,
				F3, F4, F5) ->
    dg_read_field_def_ProtocolUnit(Other, Z1, Z2, F1, F2,
				   F3, F4, F5).

dg_read_field_def_ProtocolUnit(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolUnit(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5);
dg_read_field_def_ProtocolUnit(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ProtocolUnit_id(Rest, 0, 0, F1, F2, F3, F4, F5);
      18 ->
	  d_field_ProtocolUnit_pos(Rest, 0, 0, F1, F2, F3, F4,
				   F5);
      29 ->
	  d_field_ProtocolUnit_size(Rest, 0, 0, F1, F2, F3, F4,
				    F5);
      34 ->
	  d_field_ProtocolUnit_name(Rest, 0, 0, F1, F2, F3, F4,
				    F5);
      40 ->
	  d_field_ProtocolUnit_color(Rest, 0, 0, F1, F2, F3, F4,
				     F5);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ProtocolUnit(Rest, 0, 0, F1, F2, F3, F4,
					 F5);
	    1 ->
		skip_64_ProtocolUnit(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_ProtocolUnit(Rest, 0, 0, F1, F2,
						   F3, F4, F5);
	    5 ->
		skip_32_ProtocolUnit(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_ProtocolUnit(<<>>, 0, 0, F1, F2, F3,
			       F4, F5) ->
    #'ProtocolUnit'{id = F1, pos = F2, size = F3, name = F4,
		    color = F5}.

d_field_ProtocolUnit_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_ProtocolUnit_id(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5);
d_field_ProtocolUnit_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolUnit(Rest2, 0, 0, NewFValue,
				    F2, F3, F4, F5).


d_field_ProtocolUnit_pos(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_ProtocolUnit_pos(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5);
d_field_ProtocolUnit_pos(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolVector2'),
    dfp_read_field_def_ProtocolUnit(Rest2, 0, 0, F1,
				    if F2 == undefined -> NewFValue;
				       true ->
					   merge_msg_ProtocolVector2(F2,
								     NewFValue)
				    end,
				    F3, F4, F5).


d_field_ProtocolUnit_size(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, F1, F2, _, F4, F5) ->
    dfp_read_field_def_ProtocolUnit(Rest, Z1, Z2, F1, F2,
				    Value, F4, F5).


d_field_ProtocolUnit_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_ProtocolUnit_name(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5);
d_field_ProtocolUnit_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, _, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolUnit(Rest2, 0, 0, F1, F2, F3,
				    NewFValue, F5).


d_field_ProtocolUnit_color(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_ProtocolUnit_color(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5);
d_field_ProtocolUnit_color(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ProtocolUnit(Rest, 0, 0, F1, F2, F3,
				    F4, NewFValue).


skip_varint_ProtocolUnit(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5) ->
    skip_varint_ProtocolUnit(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5);
skip_varint_ProtocolUnit(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_ProtocolUnit(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5).


skip_length_delimited_ProtocolUnit(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_ProtocolUnit(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5);
skip_length_delimited_ProtocolUnit(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolUnit(Rest2, 0, 0, F1, F2, F3,
				    F4, F5).


skip_32_ProtocolUnit(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5) ->
    dfp_read_field_def_ProtocolUnit(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5).


skip_64_ProtocolUnit(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5) ->
    dfp_read_field_def_ProtocolUnit(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5).


d_msg_ProtocolSceneInit(Bin) ->
    dfp_read_field_def_ProtocolSceneInit(Bin, 0, 0, [], []).

dfp_read_field_def_ProtocolSceneInit(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_ProtocolSceneInit_unit_adds(Rest, Z1, Z2, F1,
					F2);
dfp_read_field_def_ProtocolSceneInit(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_ProtocolSceneInit_dot_adds(Rest, Z1, Z2, F1,
				       F2);
dfp_read_field_def_ProtocolSceneInit(<<>>, 0, 0, F1,
				     F2) ->
    #'ProtocolSceneInit'{unit_adds = lists:reverse(F1),
			 dot_adds = lists:reverse(F2)};
dfp_read_field_def_ProtocolSceneInit(Other, Z1, Z2, F1,
				     F2) ->
    dg_read_field_def_ProtocolSceneInit(Other, Z1, Z2, F1,
					F2).

dg_read_field_def_ProtocolSceneInit(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolSceneInit(Rest, N + 7,
					X bsl N + Acc, F1, F2);
dg_read_field_def_ProtocolSceneInit(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ProtocolSceneInit_unit_adds(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_ProtocolSceneInit_dot_adds(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolSceneInit(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ProtocolSceneInit(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ProtocolSceneInit(Rest, 0, 0, F1,
							F2);
	    5 -> skip_32_ProtocolSceneInit(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ProtocolSceneInit(<<>>, 0, 0, F1,
				    F2) ->
    #'ProtocolSceneInit'{unit_adds = lists:reverse(F1),
			 dot_adds = lists:reverse(F2)}.

d_field_ProtocolSceneInit_unit_adds(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolSceneInit_unit_adds(Rest, N + 7,
					X bsl N + Acc, F1, F2);
d_field_ProtocolSceneInit_unit_adds(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolUnit'),
    dfp_read_field_def_ProtocolSceneInit(Rest2, 0, 0,
					 [NewFValue | F1], F2).


d_field_ProtocolSceneInit_dot_adds(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolSceneInit_dot_adds(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
d_field_ProtocolSceneInit_dot_adds(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolDot'),
    dfp_read_field_def_ProtocolSceneInit(Rest2, 0, 0, F1,
					 [NewFValue | F2]).


skip_varint_ProtocolSceneInit(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    skip_varint_ProtocolSceneInit(Rest, Z1, Z2, F1, F2);
skip_varint_ProtocolSceneInit(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    dfp_read_field_def_ProtocolSceneInit(Rest, Z1, Z2, F1,
					 F2).


skip_length_delimited_ProtocolSceneInit(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ProtocolSceneInit(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
skip_length_delimited_ProtocolSceneInit(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolSceneInit(Rest2, 0, 0, F1,
					 F2).


skip_32_ProtocolSceneInit(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_ProtocolSceneInit(Rest, Z1, Z2, F1,
					 F2).


skip_64_ProtocolSceneInit(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_ProtocolSceneInit(Rest, Z1, Z2, F1,
					 F2).


d_msg_ProtocolUnitAdd(Bin) ->
    dfp_read_field_def_ProtocolUnitAdd(Bin, 0, 0, undefined,
				       []).

dfp_read_field_def_ProtocolUnitAdd(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    d_field_ProtocolUnitAdd_is_own(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolUnitAdd(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    d_field_ProtocolUnitAdd_units(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolUnitAdd(<<>>, 0, 0, F1,
				   F2) ->
    #'ProtocolUnitAdd'{is_own = F1,
		       units = lists:reverse(F2)};
dfp_read_field_def_ProtocolUnitAdd(Other, Z1, Z2, F1,
				   F2) ->
    dg_read_field_def_ProtocolUnitAdd(Other, Z1, Z2, F1,
				      F2).

dg_read_field_def_ProtocolUnitAdd(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolUnitAdd(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
dg_read_field_def_ProtocolUnitAdd(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_ProtocolUnitAdd_is_own(Rest, 0, 0, F1, F2);
      18 -> d_field_ProtocolUnitAdd_units(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolUnitAdd(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ProtocolUnitAdd(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ProtocolUnitAdd(Rest, 0, 0, F1,
						      F2);
	    5 -> skip_32_ProtocolUnitAdd(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ProtocolUnitAdd(<<>>, 0, 0, F1, F2) ->
    #'ProtocolUnitAdd'{is_own = F1,
		       units = lists:reverse(F2)}.

d_field_ProtocolUnitAdd_is_own(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolUnitAdd_is_own(Rest, N + 7,
				   X bsl N + Acc, F1, F2);
d_field_ProtocolUnitAdd_is_own(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_ProtocolUnitAdd(Rest, 0, 0,
				       NewFValue, F2).


d_field_ProtocolUnitAdd_units(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolUnitAdd_units(Rest, N + 7,
				  X bsl N + Acc, F1, F2);
d_field_ProtocolUnitAdd_units(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolUnit'),
    dfp_read_field_def_ProtocolUnitAdd(Rest2, 0, 0, F1,
				       [NewFValue | F2]).


skip_varint_ProtocolUnitAdd(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2) ->
    skip_varint_ProtocolUnitAdd(Rest, Z1, Z2, F1, F2);
skip_varint_ProtocolUnitAdd(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2) ->
    dfp_read_field_def_ProtocolUnitAdd(Rest, Z1, Z2, F1,
				       F2).


skip_length_delimited_ProtocolUnitAdd(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ProtocolUnitAdd(Rest, N + 7,
					  X bsl N + Acc, F1, F2);
skip_length_delimited_ProtocolUnitAdd(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolUnitAdd(Rest2, 0, 0, F1, F2).


skip_32_ProtocolUnitAdd(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2) ->
    dfp_read_field_def_ProtocolUnitAdd(Rest, Z1, Z2, F1,
				       F2).


skip_64_ProtocolUnitAdd(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2) ->
    dfp_read_field_def_ProtocolUnitAdd(Rest, Z1, Z2, F1,
				       F2).


d_msg_ProtocolSceneSync(Bin) ->
    dfp_read_field_def_ProtocolSceneSync(Bin, 0, 0,
					 undefined, [], [], [], []).

dfp_read_field_def_ProtocolSceneSync(<<8, Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_ProtocolSceneSync_update_at(Rest, Z1, Z2, F1,
					F2, F3, F4, F5);
dfp_read_field_def_ProtocolSceneSync(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_ProtocolSceneSync_unit_updates(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5);
dfp_read_field_def_ProtocolSceneSync(<<26,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_ProtocolSceneSync_unit_removes(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5);
dfp_read_field_def_ProtocolSceneSync(<<34,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_ProtocolSceneSync_dot_adds(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5);
dfp_read_field_def_ProtocolSceneSync(<<42,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_ProtocolSceneSync_dot_removes(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5);
dfp_read_field_def_ProtocolSceneSync(<<>>, 0, 0, F1, F2,
				     F3, F4, F5) ->
    #'ProtocolSceneSync'{update_at = F1,
			 unit_updates = lists:reverse(F2),
			 unit_removes = lists:reverse(F3),
			 dot_adds = lists:reverse(F4),
			 dot_removes = lists:reverse(F5)};
dfp_read_field_def_ProtocolSceneSync(Other, Z1, Z2, F1,
				     F2, F3, F4, F5) ->
    dg_read_field_def_ProtocolSceneSync(Other, Z1, Z2, F1,
					F2, F3, F4, F5).

dg_read_field_def_ProtocolSceneSync(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolSceneSync(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5);
dg_read_field_def_ProtocolSceneSync(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ProtocolSceneSync_update_at(Rest, 0, 0, F1, F2,
					      F3, F4, F5);
      18 ->
	  d_field_ProtocolSceneSync_unit_updates(Rest, 0, 0, F1,
						 F2, F3, F4, F5);
      26 ->
	  d_field_ProtocolSceneSync_unit_removes(Rest, 0, 0, F1,
						 F2, F3, F4, F5);
      34 ->
	  d_field_ProtocolSceneSync_dot_adds(Rest, 0, 0, F1, F2,
					     F3, F4, F5);
      42 ->
	  d_field_ProtocolSceneSync_dot_removes(Rest, 0, 0, F1,
						F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ProtocolSceneSync(Rest, 0, 0, F1, F2, F3,
					      F4, F5);
	    1 ->
		skip_64_ProtocolSceneSync(Rest, 0, 0, F1, F2, F3, F4,
					  F5);
	    2 ->
		skip_length_delimited_ProtocolSceneSync(Rest, 0, 0, F1,
							F2, F3, F4, F5);
	    5 ->
		skip_32_ProtocolSceneSync(Rest, 0, 0, F1, F2, F3, F4,
					  F5)
	  end
    end;
dg_read_field_def_ProtocolSceneSync(<<>>, 0, 0, F1, F2,
				    F3, F4, F5) ->
    #'ProtocolSceneSync'{update_at = F1,
			 unit_updates = lists:reverse(F2),
			 unit_removes = lists:reverse(F3),
			 dot_adds = lists:reverse(F4),
			 dot_removes = lists:reverse(F5)}.

d_field_ProtocolSceneSync_update_at(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_ProtocolSceneSync_update_at(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_ProtocolSceneSync_update_at(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, F3, F4, F5) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_ProtocolSceneSync(Rest, 0, 0,
					 NewFValue, F2, F3, F4, F5).


d_field_ProtocolSceneSync_unit_updates(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_ProtocolSceneSync_unit_updates(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_ProtocolSceneSync_unit_updates(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolUnit'),
    dfp_read_field_def_ProtocolSceneSync(Rest2, 0, 0, F1,
					 [NewFValue | F2], F3, F4, F5).


d_field_ProtocolSceneSync_unit_removes(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_ProtocolSceneSync_unit_removes(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_ProtocolSceneSync_unit_removes(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolSceneSync(Rest2, 0, 0, F1,
					 F2, [NewFValue | F3], F4, F5).


d_field_ProtocolSceneSync_dot_adds(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_ProtocolSceneSync_dot_adds(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_ProtocolSceneSync_dot_adds(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ProtocolDot'),
    dfp_read_field_def_ProtocolSceneSync(Rest2, 0, 0, F1,
					 F2, F3, [NewFValue | F4], F5).


d_field_ProtocolSceneSync_dot_removes(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_ProtocolSceneSync_dot_removes(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_ProtocolSceneSync_dot_removes(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ProtocolSceneSync(Rest2, 0, 0, F1,
					 F2, F3, F4, [NewFValue | F5]).


skip_varint_ProtocolSceneSync(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5) ->
    skip_varint_ProtocolSceneSync(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5);
skip_varint_ProtocolSceneSync(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_ProtocolSceneSync(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5).


skip_length_delimited_ProtocolSceneSync(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_ProtocolSceneSync(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5);
skip_length_delimited_ProtocolSceneSync(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolSceneSync(Rest2, 0, 0, F1,
					 F2, F3, F4, F5).


skip_32_ProtocolSceneSync(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5) ->
    dfp_read_field_def_ProtocolSceneSync(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5).


skip_64_ProtocolSceneSync(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5) ->
    dfp_read_field_def_ProtocolSceneSync(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5).


d_msg_ProtocolUnitSpeedNormal(Bin) ->
    dfp_read_field_def_ProtocolUnitSpeedNormal(Bin, 0, 0).

dfp_read_field_def_ProtocolUnitSpeedNormal(<<>>, 0,
					   0) ->
    #'ProtocolUnitSpeedNormal'{};
dfp_read_field_def_ProtocolUnitSpeedNormal(Other, Z1,
					   Z2) ->
    dg_read_field_def_ProtocolUnitSpeedNormal(Other, Z1,
					      Z2).

dg_read_field_def_ProtocolUnitSpeedNormal(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolUnitSpeedNormal(Rest, N + 7,
					      X bsl N + Acc);
dg_read_field_def_ProtocolUnitSpeedNormal(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_ProtocolUnitSpeedNormal(Rest, 0, 0);
      1 -> skip_64_ProtocolUnitSpeedNormal(Rest, 0, 0);
      2 ->
	  skip_length_delimited_ProtocolUnitSpeedNormal(Rest, 0,
							0);
      5 -> skip_32_ProtocolUnitSpeedNormal(Rest, 0, 0)
    end;
dg_read_field_def_ProtocolUnitSpeedNormal(<<>>, 0, 0) ->
    #'ProtocolUnitSpeedNormal'{}.

skip_varint_ProtocolUnitSpeedNormal(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2) ->
    skip_varint_ProtocolUnitSpeedNormal(Rest, Z1, Z2);
skip_varint_ProtocolUnitSpeedNormal(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2) ->
    dfp_read_field_def_ProtocolUnitSpeedNormal(Rest, Z1,
					       Z2).


skip_length_delimited_ProtocolUnitSpeedNormal(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc)
    when N < 57 ->
    skip_length_delimited_ProtocolUnitSpeedNormal(Rest,
						  N + 7, X bsl N + Acc);
skip_length_delimited_ProtocolUnitSpeedNormal(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolUnitSpeedNormal(Rest2, 0, 0).


skip_32_ProtocolUnitSpeedNormal(<<_:32, Rest/binary>>,
				Z1, Z2) ->
    dfp_read_field_def_ProtocolUnitSpeedNormal(Rest, Z1,
					       Z2).


skip_64_ProtocolUnitSpeedNormal(<<_:64, Rest/binary>>,
				Z1, Z2) ->
    dfp_read_field_def_ProtocolUnitSpeedNormal(Rest, Z1,
					       Z2).


d_msg_ProtocolConfig(Bin) ->
    dfp_read_field_def_ProtocolConfig(Bin, 0, 0, undefined,
				      undefined, undefined).

dfp_read_field_def_ProtocolConfig(<<13, Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    d_field_ProtocolConfig_sync_interval(Rest, Z1, Z2, F1,
					 F2, F3);
dfp_read_field_def_ProtocolConfig(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    d_field_ProtocolConfig_map_x(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_ProtocolConfig(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    d_field_ProtocolConfig_map_y(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_ProtocolConfig(<<>>, 0, 0, F1, F2,
				  F3) ->
    #'ProtocolConfig'{sync_interval = F1, map_x = F2,
		      map_y = F3};
dfp_read_field_def_ProtocolConfig(Other, Z1, Z2, F1, F2,
				  F3) ->
    dg_read_field_def_ProtocolConfig(Other, Z1, Z2, F1, F2,
				     F3).

dg_read_field_def_ProtocolConfig(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolConfig(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3);
dg_read_field_def_ProtocolConfig(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_ProtocolConfig_sync_interval(Rest, 0, 0, F1, F2,
					       F3);
      16 ->
	  d_field_ProtocolConfig_map_x(Rest, 0, 0, F1, F2, F3);
      24 ->
	  d_field_ProtocolConfig_map_y(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolConfig(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_ProtocolConfig(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_ProtocolConfig(Rest, 0, 0, F1, F2,
						     F3);
	    5 -> skip_32_ProtocolConfig(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_ProtocolConfig(<<>>, 0, 0, F1, F2,
				 F3) ->
    #'ProtocolConfig'{sync_interval = F1, map_x = F2,
		      map_y = F3}.

d_field_ProtocolConfig_sync_interval(<<Value:32/little-float,
				       Rest/binary>>,
				     Z1, Z2, _, F2, F3) ->
    dfp_read_field_def_ProtocolConfig(Rest, Z1, Z2, Value,
				      F2, F3).


d_field_ProtocolConfig_map_x(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ProtocolConfig_map_x(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3);
d_field_ProtocolConfig_map_x(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ProtocolConfig(Rest, 0, 0, F1,
				      NewFValue, F3).


d_field_ProtocolConfig_map_y(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ProtocolConfig_map_y(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3);
d_field_ProtocolConfig_map_y(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ProtocolConfig(Rest, 0, 0, F1, F2,
				      NewFValue).


skip_varint_ProtocolConfig(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3) ->
    skip_varint_ProtocolConfig(Rest, Z1, Z2, F1, F2, F3);
skip_varint_ProtocolConfig(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_ProtocolConfig(Rest, Z1, Z2, F1, F2,
				      F3).


skip_length_delimited_ProtocolConfig(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_ProtocolConfig(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
skip_length_delimited_ProtocolConfig(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolConfig(Rest2, 0, 0, F1, F2,
				      F3).


skip_32_ProtocolConfig(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3) ->
    dfp_read_field_def_ProtocolConfig(Rest, Z1, Z2, F1, F2,
				      F3).


skip_64_ProtocolConfig(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3) ->
    dfp_read_field_def_ProtocolConfig(Rest, Z1, Z2, F1, F2,
				      F3).


d_msg_ProtocolTimeSync(Bin) ->
    dfp_read_field_def_ProtocolTimeSync(Bin, 0, 0,
					undefined, undefined).

dfp_read_field_def_ProtocolTimeSync(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    d_field_ProtocolTimeSync_client(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolTimeSync(<<16, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    d_field_ProtocolTimeSync_server(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ProtocolTimeSync(<<>>, 0, 0, F1,
				    F2) ->
    #'ProtocolTimeSync'{client = F1, server = F2};
dfp_read_field_def_ProtocolTimeSync(Other, Z1, Z2, F1,
				    F2) ->
    dg_read_field_def_ProtocolTimeSync(Other, Z1, Z2, F1,
				       F2).

dg_read_field_def_ProtocolTimeSync(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolTimeSync(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
dg_read_field_def_ProtocolTimeSync(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ProtocolTimeSync_client(Rest, 0, 0, F1, F2);
      16 ->
	  d_field_ProtocolTimeSync_server(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ProtocolTimeSync(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ProtocolTimeSync(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ProtocolTimeSync(Rest, 0, 0, F1,
						       F2);
	    5 -> skip_32_ProtocolTimeSync(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ProtocolTimeSync(<<>>, 0, 0, F1,
				   F2) ->
    #'ProtocolTimeSync'{client = F1, server = F2}.

d_field_ProtocolTimeSync_client(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolTimeSync_client(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
d_field_ProtocolTimeSync_client(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_ProtocolTimeSync(Rest, 0, 0,
					NewFValue, F2).


d_field_ProtocolTimeSync_server(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    d_field_ProtocolTimeSync_server(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
d_field_ProtocolTimeSync_server(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_ProtocolTimeSync(Rest, 0, 0, F1,
					NewFValue).


skip_varint_ProtocolTimeSync(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    skip_varint_ProtocolTimeSync(Rest, Z1, Z2, F1, F2);
skip_varint_ProtocolTimeSync(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    dfp_read_field_def_ProtocolTimeSync(Rest, Z1, Z2, F1,
					F2).


skip_length_delimited_ProtocolTimeSync(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ProtocolTimeSync(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
skip_length_delimited_ProtocolTimeSync(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolTimeSync(Rest2, 0, 0, F1,
					F2).


skip_32_ProtocolTimeSync(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    dfp_read_field_def_ProtocolTimeSync(Rest, Z1, Z2, F1,
					F2).


skip_64_ProtocolTimeSync(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    dfp_read_field_def_ProtocolTimeSync(Rest, Z1, Z2, F1,
					F2).


d_msg_ProtocolUnitSpeedUp(Bin) ->
    dfp_read_field_def_ProtocolUnitSpeedUp(Bin, 0, 0).

dfp_read_field_def_ProtocolUnitSpeedUp(<<>>, 0, 0) ->
    #'ProtocolUnitSpeedUp'{};
dfp_read_field_def_ProtocolUnitSpeedUp(Other, Z1, Z2) ->
    dg_read_field_def_ProtocolUnitSpeedUp(Other, Z1, Z2).

dg_read_field_def_ProtocolUnitSpeedUp(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc)
    when N < 32 - 7 ->
    dg_read_field_def_ProtocolUnitSpeedUp(Rest, N + 7,
					  X bsl N + Acc);
dg_read_field_def_ProtocolUnitSpeedUp(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_ProtocolUnitSpeedUp(Rest, 0, 0);
      1 -> skip_64_ProtocolUnitSpeedUp(Rest, 0, 0);
      2 ->
	  skip_length_delimited_ProtocolUnitSpeedUp(Rest, 0, 0);
      5 -> skip_32_ProtocolUnitSpeedUp(Rest, 0, 0)
    end;
dg_read_field_def_ProtocolUnitSpeedUp(<<>>, 0, 0) ->
    #'ProtocolUnitSpeedUp'{}.

skip_varint_ProtocolUnitSpeedUp(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2) ->
    skip_varint_ProtocolUnitSpeedUp(Rest, Z1, Z2);
skip_varint_ProtocolUnitSpeedUp(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2) ->
    dfp_read_field_def_ProtocolUnitSpeedUp(Rest, Z1, Z2).


skip_length_delimited_ProtocolUnitSpeedUp(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc)
    when N < 57 ->
    skip_length_delimited_ProtocolUnitSpeedUp(Rest, N + 7,
					      X bsl N + Acc);
skip_length_delimited_ProtocolUnitSpeedUp(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProtocolUnitSpeedUp(Rest2, 0, 0).


skip_32_ProtocolUnitSpeedUp(<<_:32, Rest/binary>>, Z1,
			    Z2) ->
    dfp_read_field_def_ProtocolUnitSpeedUp(Rest, Z1, Z2).


skip_64_ProtocolUnitSpeedUp(<<_:64, Rest/binary>>, Z1,
			    Z2) ->
    dfp_read_field_def_ProtocolUnitSpeedUp(Rest, Z1, Z2).




merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'ProtocolVector2'{} ->
	  merge_msg_ProtocolVector2(Prev, New);
      #'ProtocolUnitCreate'{} ->
	  merge_msg_ProtocolUnitCreate(Prev, New);
      #'ProtocolUnitMove'{} ->
	  merge_msg_ProtocolUnitMove(Prev, New);
      #'ProtocolDot'{} -> merge_msg_ProtocolDot(Prev, New);
      #'ProtocolUnit'{} -> merge_msg_ProtocolUnit(Prev, New);
      #'ProtocolSceneInit'{} ->
	  merge_msg_ProtocolSceneInit(Prev, New);
      #'ProtocolUnitAdd'{} ->
	  merge_msg_ProtocolUnitAdd(Prev, New);
      #'ProtocolSceneSync'{} ->
	  merge_msg_ProtocolSceneSync(Prev, New);
      #'ProtocolUnitSpeedNormal'{} ->
	  merge_msg_ProtocolUnitSpeedNormal(Prev, New);
      #'ProtocolConfig'{} ->
	  merge_msg_ProtocolConfig(Prev, New);
      #'ProtocolTimeSync'{} ->
	  merge_msg_ProtocolTimeSync(Prev, New);
      #'ProtocolUnitSpeedUp'{} ->
	  merge_msg_ProtocolUnitSpeedUp(Prev, New)
    end.

merge_msg_ProtocolVector2(#'ProtocolVector2'{x = PFx,
					     y = PFy},
			  #'ProtocolVector2'{x = NFx, y = NFy}) ->
    #'ProtocolVector2'{x =
			   if NFx =:= undefined -> PFx;
			      true -> NFx
			   end,
		       y =
			   if NFy =:= undefined -> PFy;
			      true -> NFy
			   end}.

merge_msg_ProtocolUnitCreate(#'ProtocolUnitCreate'{name
						       = PFname,
						   pos = PFpos},
			     #'ProtocolUnitCreate'{name = NFname,
						   pos = NFpos}) ->
    #'ProtocolUnitCreate'{name =
			      if NFname =:= undefined -> PFname;
				 true -> NFname
			      end,
			  pos = merge_msg_ProtocolVector2(PFpos, NFpos)}.

merge_msg_ProtocolUnitMove(#'ProtocolUnitMove'{target =
						   PFtarget},
			   #'ProtocolUnitMove'{target = NFtarget}) ->
    #'ProtocolUnitMove'{target =
			    merge_msg_ProtocolVector2(PFtarget, NFtarget)}.

merge_msg_ProtocolDot(#'ProtocolDot'{id = PFid,
				     pos = PFpos, color = PFcolor},
		      #'ProtocolDot'{id = NFid, pos = NFpos,
				     color = NFcolor}) ->
    #'ProtocolDot'{id =
		       if NFid =:= undefined -> PFid;
			  true -> NFid
		       end,
		   pos = merge_msg_ProtocolVector2(PFpos, NFpos),
		   color =
		       if NFcolor =:= undefined -> PFcolor;
			  true -> NFcolor
		       end}.

merge_msg_ProtocolUnit(#'ProtocolUnit'{id = PFid,
				       pos = PFpos, size = PFsize,
				       name = PFname, color = PFcolor},
		       #'ProtocolUnit'{id = NFid, pos = NFpos, size = NFsize,
				       name = NFname, color = NFcolor}) ->
    #'ProtocolUnit'{id =
			if NFid =:= undefined -> PFid;
			   true -> NFid
			end,
		    pos = merge_msg_ProtocolVector2(PFpos, NFpos),
		    size =
			if NFsize =:= undefined -> PFsize;
			   true -> NFsize
			end,
		    name =
			if NFname =:= undefined -> PFname;
			   true -> NFname
			end,
		    color =
			if NFcolor =:= undefined -> PFcolor;
			   true -> NFcolor
			end}.

merge_msg_ProtocolSceneInit(#'ProtocolSceneInit'{unit_adds
						     = PFunit_adds,
						 dot_adds = PFdot_adds},
			    #'ProtocolSceneInit'{unit_adds = NFunit_adds,
						 dot_adds = NFdot_adds}) ->
    #'ProtocolSceneInit'{unit_adds =
			     PFunit_adds ++ NFunit_adds,
			 dot_adds = PFdot_adds ++ NFdot_adds}.

merge_msg_ProtocolUnitAdd(#'ProtocolUnitAdd'{is_own =
						 PFis_own,
					     units = PFunits},
			  #'ProtocolUnitAdd'{is_own = NFis_own,
					     units = NFunits}) ->
    #'ProtocolUnitAdd'{is_own =
			   if NFis_own =:= undefined -> PFis_own;
			      true -> NFis_own
			   end,
		       units = PFunits ++ NFunits}.

merge_msg_ProtocolSceneSync(#'ProtocolSceneSync'{update_at
						     = PFupdate_at,
						 unit_updates = PFunit_updates,
						 unit_removes = PFunit_removes,
						 dot_adds = PFdot_adds,
						 dot_removes = PFdot_removes},
			    #'ProtocolSceneSync'{update_at = NFupdate_at,
						 unit_updates = NFunit_updates,
						 unit_removes = NFunit_removes,
						 dot_adds = NFdot_adds,
						 dot_removes =
						     NFdot_removes}) ->
    #'ProtocolSceneSync'{update_at =
			     if NFupdate_at =:= undefined -> PFupdate_at;
				true -> NFupdate_at
			     end,
			 unit_updates = PFunit_updates ++ NFunit_updates,
			 unit_removes = PFunit_removes ++ NFunit_removes,
			 dot_adds = PFdot_adds ++ NFdot_adds,
			 dot_removes = PFdot_removes ++ NFdot_removes}.

merge_msg_ProtocolUnitSpeedNormal(_Prev, New) -> New.

merge_msg_ProtocolConfig(#'ProtocolConfig'{sync_interval
					       = PFsync_interval,
					   map_x = PFmap_x, map_y = PFmap_y},
			 #'ProtocolConfig'{sync_interval = NFsync_interval,
					   map_x = NFmap_x, map_y = NFmap_y}) ->
    #'ProtocolConfig'{sync_interval =
			  if NFsync_interval =:= undefined -> PFsync_interval;
			     true -> NFsync_interval
			  end,
		      map_x =
			  if NFmap_x =:= undefined -> PFmap_x;
			     true -> NFmap_x
			  end,
		      map_y =
			  if NFmap_y =:= undefined -> PFmap_y;
			     true -> NFmap_y
			  end}.

merge_msg_ProtocolTimeSync(#'ProtocolTimeSync'{client =
						   PFclient,
					       server = PFserver},
			   #'ProtocolTimeSync'{client = NFclient,
					       server = NFserver}) ->
    #'ProtocolTimeSync'{client =
			    if NFclient =:= undefined -> PFclient;
			       true -> NFclient
			    end,
			server =
			    if NFserver =:= undefined -> PFserver;
			       true -> NFserver
			    end}.

merge_msg_ProtocolUnitSpeedUp(_Prev, New) -> New.



verify_msg(Msg) ->
    case Msg of
      #'ProtocolVector2'{} ->
	  v_msg_ProtocolVector2(Msg, ['ProtocolVector2']);
      #'ProtocolUnitCreate'{} ->
	  v_msg_ProtocolUnitCreate(Msg, ['ProtocolUnitCreate']);
      #'ProtocolUnitMove'{} ->
	  v_msg_ProtocolUnitMove(Msg, ['ProtocolUnitMove']);
      #'ProtocolDot'{} ->
	  v_msg_ProtocolDot(Msg, ['ProtocolDot']);
      #'ProtocolUnit'{} ->
	  v_msg_ProtocolUnit(Msg, ['ProtocolUnit']);
      #'ProtocolSceneInit'{} ->
	  v_msg_ProtocolSceneInit(Msg, ['ProtocolSceneInit']);
      #'ProtocolUnitAdd'{} ->
	  v_msg_ProtocolUnitAdd(Msg, ['ProtocolUnitAdd']);
      #'ProtocolSceneSync'{} ->
	  v_msg_ProtocolSceneSync(Msg, ['ProtocolSceneSync']);
      #'ProtocolUnitSpeedNormal'{} ->
	  v_msg_ProtocolUnitSpeedNormal(Msg,
					['ProtocolUnitSpeedNormal']);
      #'ProtocolConfig'{} ->
	  v_msg_ProtocolConfig(Msg, ['ProtocolConfig']);
      #'ProtocolTimeSync'{} ->
	  v_msg_ProtocolTimeSync(Msg, ['ProtocolTimeSync']);
      #'ProtocolUnitSpeedUp'{} ->
	  v_msg_ProtocolUnitSpeedUp(Msg, ['ProtocolUnitSpeedUp']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_ProtocolVector2(#'ProtocolVector2'{x = F1,
					 y = F2},
		      Path) ->
    v_type_float(F1, [x | Path]),
    v_type_float(F2, [y | Path]),
    ok;
v_msg_ProtocolVector2(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolVector2'}, X,
		  Path).

v_msg_ProtocolUnitCreate(#'ProtocolUnitCreate'{name =
						   F1,
					       pos = F2},
			 Path) ->
    v_type_string(F1, [name | Path]),
    v_msg_ProtocolVector2(F2, [pos | Path]),
    ok.

v_msg_ProtocolUnitMove(#'ProtocolUnitMove'{target = F1},
		       Path) ->
    v_msg_ProtocolVector2(F1, [target | Path]), ok.

v_msg_ProtocolDot(#'ProtocolDot'{id = F1, pos = F2,
				 color = F3},
		  Path) ->
    v_type_string(F1, [id | Path]),
    v_msg_ProtocolVector2(F2, [pos | Path]),
    v_type_int32(F3, [color | Path]),
    ok;
v_msg_ProtocolDot(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolDot'}, X, Path).

v_msg_ProtocolUnit(#'ProtocolUnit'{id = F1, pos = F2,
				   size = F3, name = F4, color = F5},
		   Path) ->
    v_type_string(F1, [id | Path]),
    v_msg_ProtocolVector2(F2, [pos | Path]),
    if F3 == undefined -> ok;
       true -> v_type_float(F3, [size | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [name | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [color | Path])
    end,
    ok;
v_msg_ProtocolUnit(X, Path) ->
    mk_type_error({expected_msg, 'ProtocolUnit'}, X, Path).

v_msg_ProtocolSceneInit(#'ProtocolSceneInit'{unit_adds =
						 F1,
					     dot_adds = F2},
			Path) ->
    if is_list(F1) ->
	   [v_msg_ProtocolUnit(Elem, [unit_adds | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ProtocolUnit'}},
			 F1, Path)
    end,
    if is_list(F2) ->
	   [v_msg_ProtocolDot(Elem, [dot_adds | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ProtocolDot'}},
			 F2, Path)
    end,
    ok.

v_msg_ProtocolUnitAdd(#'ProtocolUnitAdd'{is_own = F1,
					 units = F2},
		      Path) ->
    v_type_bool(F1, [is_own | Path]),
    if is_list(F2) ->
	   [v_msg_ProtocolUnit(Elem, [units | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ProtocolUnit'}},
			 F2, Path)
    end,
    ok.

v_msg_ProtocolSceneSync(#'ProtocolSceneSync'{update_at =
						 F1,
					     unit_updates = F2,
					     unit_removes = F3, dot_adds = F4,
					     dot_removes = F5},
			Path) ->
    v_type_int64(F1, [update_at | Path]),
    if is_list(F2) ->
	   [v_msg_ProtocolUnit(Elem, [unit_updates | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ProtocolUnit'}},
			 F2, Path)
    end,
    if is_list(F3) ->
	   [v_type_string(Elem, [unit_removes | Path])
	    || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of, string}, F3, Path)
    end,
    if is_list(F4) ->
	   [v_msg_ProtocolDot(Elem, [dot_adds | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ProtocolDot'}},
			 F4, Path)
    end,
    if is_list(F5) ->
	   [v_type_string(Elem, [dot_removes | Path])
	    || Elem <- F5];
       true ->
	   mk_type_error({invalid_list_of, string}, F5, Path)
    end,
    ok.

v_msg_ProtocolUnitSpeedNormal(#'ProtocolUnitSpeedNormal'{},
			      _Path) ->
    ok.

v_msg_ProtocolConfig(#'ProtocolConfig'{sync_interval =
					   F1,
				       map_x = F2, map_y = F3},
		     Path) ->
    v_type_float(F1, [sync_interval | Path]),
    v_type_int32(F2, [map_x | Path]),
    v_type_int32(F3, [map_y | Path]),
    ok.

v_msg_ProtocolTimeSync(#'ProtocolTimeSync'{client = F1,
					   server = F2},
		       Path) ->
    v_type_int64(F1, [client | Path]),
    v_type_int64(F2, [server | Path]),
    ok.

v_msg_ProtocolUnitSpeedUp(#'ProtocolUnitSpeedUp'{},
			  _Path) ->
    ok.

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

v_type_float(N, _Path) when is_float(N) -> ok;
v_type_float(N, _Path) when is_integer(N) -> ok;
v_type_float(X, Path) ->
    mk_type_error(bad_float_value, X, Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{msg, 'ProtocolVector2'},
      [#field{name = x, fnum = 1, rnum = 2, type = float,
	      occurrence = required, opts = []},
       #field{name = y, fnum = 2, rnum = 3, type = float,
	      occurrence = required, opts = []}]},
     {{msg, 'ProtocolUnitCreate'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = pos, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolVector2'}, occurrence = required,
	      opts = []}]},
     {{msg, 'ProtocolUnitMove'},
      [#field{name = target, fnum = 1, rnum = 2,
	      type = {msg, 'ProtocolVector2'}, occurrence = required,
	      opts = []}]},
     {{msg, 'ProtocolDot'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = pos, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolVector2'}, occurrence = required,
	      opts = []},
       #field{name = color, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'ProtocolUnit'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = pos, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolVector2'}, occurrence = required,
	      opts = []},
       #field{name = size, fnum = 3, rnum = 4, type = float,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = color, fnum = 5, rnum = 6, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtocolSceneInit'},
      [#field{name = unit_adds, fnum = 1, rnum = 2,
	      type = {msg, 'ProtocolUnit'}, occurrence = repeated,
	      opts = []},
       #field{name = dot_adds, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolDot'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'ProtocolUnitAdd'},
      [#field{name = is_own, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = units, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolUnit'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'ProtocolSceneSync'},
      [#field{name = update_at, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []},
       #field{name = unit_updates, fnum = 2, rnum = 3,
	      type = {msg, 'ProtocolUnit'}, occurrence = repeated,
	      opts = []},
       #field{name = unit_removes, fnum = 3, rnum = 4,
	      type = string, occurrence = repeated, opts = []},
       #field{name = dot_adds, fnum = 4, rnum = 5,
	      type = {msg, 'ProtocolDot'}, occurrence = repeated,
	      opts = []},
       #field{name = dot_removes, fnum = 5, rnum = 6,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'ProtocolUnitSpeedNormal'}, []},
     {{msg, 'ProtocolConfig'},
      [#field{name = sync_interval, fnum = 1, rnum = 2,
	      type = float, occurrence = required, opts = []},
       #field{name = map_x, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = map_y, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'ProtocolTimeSync'},
      [#field{name = client, fnum = 1, rnum = 2, type = int64,
	      occurrence = required, opts = []},
       #field{name = server, fnum = 2, rnum = 3, type = int64,
	      occurrence = required, opts = []}]},
     {{msg, 'ProtocolUnitSpeedUp'}, []}].


get_msg_names() ->
    ['ProtocolVector2', 'ProtocolUnitCreate',
     'ProtocolUnitMove', 'ProtocolDot', 'ProtocolUnit',
     'ProtocolSceneInit', 'ProtocolUnitAdd',
     'ProtocolSceneSync', 'ProtocolUnitSpeedNormal',
     'ProtocolConfig', 'ProtocolTimeSync',
     'ProtocolUnitSpeedUp'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('ProtocolVector2') ->
    [#field{name = x, fnum = 1, rnum = 2, type = float,
	    occurrence = required, opts = []},
     #field{name = y, fnum = 2, rnum = 3, type = float,
	    occurrence = required, opts = []}];
find_msg_def('ProtocolUnitCreate') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = pos, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolVector2'}, occurrence = required,
	    opts = []}];
find_msg_def('ProtocolUnitMove') ->
    [#field{name = target, fnum = 1, rnum = 2,
	    type = {msg, 'ProtocolVector2'}, occurrence = required,
	    opts = []}];
find_msg_def('ProtocolDot') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = pos, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolVector2'}, occurrence = required,
	    opts = []},
     #field{name = color, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('ProtocolUnit') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = pos, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolVector2'}, occurrence = required,
	    opts = []},
     #field{name = size, fnum = 3, rnum = 4, type = float,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = color, fnum = 5, rnum = 6, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('ProtocolSceneInit') ->
    [#field{name = unit_adds, fnum = 1, rnum = 2,
	    type = {msg, 'ProtocolUnit'}, occurrence = repeated,
	    opts = []},
     #field{name = dot_adds, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolDot'}, occurrence = repeated,
	    opts = []}];
find_msg_def('ProtocolUnitAdd') ->
    [#field{name = is_own, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = units, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolUnit'}, occurrence = repeated,
	    opts = []}];
find_msg_def('ProtocolSceneSync') ->
    [#field{name = update_at, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []},
     #field{name = unit_updates, fnum = 2, rnum = 3,
	    type = {msg, 'ProtocolUnit'}, occurrence = repeated,
	    opts = []},
     #field{name = unit_removes, fnum = 3, rnum = 4,
	    type = string, occurrence = repeated, opts = []},
     #field{name = dot_adds, fnum = 4, rnum = 5,
	    type = {msg, 'ProtocolDot'}, occurrence = repeated,
	    opts = []},
     #field{name = dot_removes, fnum = 5, rnum = 6,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('ProtocolUnitSpeedNormal') -> [];
find_msg_def('ProtocolConfig') ->
    [#field{name = sync_interval, fnum = 1, rnum = 2,
	    type = float, occurrence = required, opts = []},
     #field{name = map_x, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = map_y, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('ProtocolTimeSync') ->
    [#field{name = client, fnum = 1, rnum = 2, type = int64,
	    occurrence = required, opts = []},
     #field{name = server, fnum = 2, rnum = 3, type = int64,
	    occurrence = required, opts = []}];
find_msg_def('ProtocolUnitSpeedUp') -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.18.4".

gpb_version_as_list() ->
    [3,18,4].
